2025-07-05 22:34:21,061:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-05 22:34:21,061:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-05 22:34:21,061:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-05 22:34:21,061:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 13:09:49,583:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 13:09:49,583:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 13:09:49,583:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 13:09:49,583:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 13:39:36,721:INFO:PyCaret ClassificationExperiment
2025-07-06 13:39:36,721:INFO:Logging name: clf-default-name
2025-07-06 13:39:36,722:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-07-06 13:39:36,722:INFO:version 3.3.2
2025-07-06 13:39:36,722:INFO:Initializing setup()
2025-07-06 13:39:36,722:INFO:self.USI: f8ed
2025-07-06 13:39:36,722:INFO:self._variable_keys: {'fold_shuffle_param', 'html_param', 'logging_param', 'target_param', 'fold_groups_param', 'X', 'y_train', 'idx', 'gpu_n_jobs_param', 'n_jobs_param', 'pipeline', 'log_plots_param', 'seed', 'gpu_param', '_ml_usecase', 'is_multiclass', 'exp_name_log', 'y', 'X_train', 'y_test', 'USI', 'memory', 'data', 'fold_generator', '_available_plots', 'exp_id', 'X_test', 'fix_imbalance'}
2025-07-06 13:39:36,722:INFO:Checking environment
2025-07-06 13:39:36,722:INFO:python_version: 3.9.6
2025-07-06 13:39:36,722:INFO:python_build: ('default', 'Feb  3 2024 15:58:28')
2025-07-06 13:39:36,722:INFO:machine: x86_64
2025-07-06 13:39:36,723:INFO:platform: macOS-14.4.1-x86_64-i386-64bit
2025-07-06 13:39:36,723:INFO:Memory: svmem(total=8589934592, available=2277539840, percent=73.5, used=4306391040, free=40439808, active=2239782912, inactive=2234904576, wired=2066608128)
2025-07-06 13:39:36,723:INFO:Physical Core: 4
2025-07-06 13:39:36,724:INFO:Logical Core: 8
2025-07-06 13:39:36,724:INFO:Checking libraries
2025-07-06 13:39:36,724:INFO:System:
2025-07-06 13:39:36,724:INFO:    python: 3.9.6 (default, Feb  3 2024, 15:58:28)  [Clang 15.0.0 (clang-1500.3.9.4)]
2025-07-06 13:39:36,724:INFO:executable: /Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/bin/python
2025-07-06 13:39:36,724:INFO:   machine: macOS-14.4.1-x86_64-i386-64bit
2025-07-06 13:39:36,724:INFO:PyCaret required dependencies:
2025-07-06 13:40:23,443:INFO:PyCaret ClassificationExperiment
2025-07-06 13:40:23,443:INFO:Logging name: clf-default-name
2025-07-06 13:40:23,444:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-07-06 13:40:23,444:INFO:version 3.3.2
2025-07-06 13:40:23,444:INFO:Initializing setup()
2025-07-06 13:40:23,444:INFO:self.USI: 3a6d
2025-07-06 13:40:23,444:INFO:self._variable_keys: {'fold_shuffle_param', 'html_param', 'logging_param', 'target_param', 'fold_groups_param', 'X', 'y_train', 'idx', 'gpu_n_jobs_param', 'n_jobs_param', 'pipeline', 'log_plots_param', 'seed', 'gpu_param', '_ml_usecase', 'is_multiclass', 'exp_name_log', 'y', 'X_train', 'y_test', 'USI', 'memory', 'data', 'fold_generator', '_available_plots', 'exp_id', 'X_test', 'fix_imbalance'}
2025-07-06 13:40:23,444:INFO:Checking environment
2025-07-06 13:40:23,444:INFO:python_version: 3.9.6
2025-07-06 13:40:23,444:INFO:python_build: ('default', 'Feb  3 2024 15:58:28')
2025-07-06 13:40:23,445:INFO:machine: x86_64
2025-07-06 13:40:23,445:INFO:platform: macOS-14.4.1-x86_64-i386-64bit
2025-07-06 13:40:23,445:INFO:Memory: svmem(total=8589934592, available=2238275584, percent=73.9, used=4292648960, free=43495424, active=2199007232, inactive=2193182720, wired=2093641728)
2025-07-06 13:40:23,445:INFO:Physical Core: 4
2025-07-06 13:40:23,445:INFO:Logical Core: 8
2025-07-06 13:40:23,445:INFO:Checking libraries
2025-07-06 13:40:23,445:INFO:System:
2025-07-06 13:40:23,446:INFO:    python: 3.9.6 (default, Feb  3 2024, 15:58:28)  [Clang 15.0.0 (clang-1500.3.9.4)]
2025-07-06 13:40:23,446:INFO:executable: /Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/bin/python
2025-07-06 13:40:23,447:INFO:   machine: macOS-14.4.1-x86_64-i386-64bit
2025-07-06 13:40:23,447:INFO:PyCaret required dependencies:
2025-07-06 13:46:57,449:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 13:46:57,449:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 13:46:57,449:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 13:46:57,449:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-06 13:46:58,542:INFO:PyCaret ClassificationExperiment
2025-07-06 13:46:58,544:INFO:Logging name: clf-default-name
2025-07-06 13:46:58,554:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-07-06 13:46:58,554:INFO:version 3.3.2
2025-07-06 13:46:58,554:INFO:Initializing setup()
2025-07-06 13:46:58,554:INFO:self.USI: 69ea
2025-07-06 13:46:58,555:INFO:self._variable_keys: {'fold_generator', 'data', 'fold_groups_param', 'logging_param', 'idx', 'is_multiclass', 'fix_imbalance', 'fold_shuffle_param', 'exp_name_log', 'html_param', 'n_jobs_param', 'target_param', 'exp_id', 'memory', 'pipeline', 'gpu_param', 'y_test', 'gpu_n_jobs_param', 'USI', 'y', 'X_train', 'X', 'log_plots_param', 'seed', '_ml_usecase', 'X_test', '_available_plots', 'y_train'}
2025-07-06 13:46:58,555:INFO:Checking environment
2025-07-06 13:46:58,555:INFO:python_version: 3.9.6
2025-07-06 13:46:58,555:INFO:python_build: ('default', 'Feb  3 2024 15:58:28')
2025-07-06 13:46:58,555:INFO:machine: x86_64
2025-07-06 13:46:58,555:INFO:platform: macOS-14.4.1-x86_64-i386-64bit
2025-07-06 13:46:58,555:INFO:Memory: svmem(total=8589934592, available=2429116416, percent=71.7, used=4368072704, free=9777152, active=2374197248, inactive=2386505728, wired=1993875456)
2025-07-06 13:46:58,556:INFO:Physical Core: 4
2025-07-06 13:46:58,556:INFO:Logical Core: 8
2025-07-06 13:46:58,556:INFO:Checking libraries
2025-07-06 13:46:58,556:INFO:System:
2025-07-06 13:46:58,556:INFO:    python: 3.9.6 (default, Feb  3 2024, 15:58:28)  [Clang 15.0.0 (clang-1500.3.9.4)]
2025-07-06 13:46:58,556:INFO:executable: /Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/bin/python
2025-07-06 13:46:58,556:INFO:   machine: macOS-14.4.1-x86_64-i386-64bit
2025-07-06 13:46:58,556:INFO:PyCaret required dependencies:
2025-07-06 13:46:59,617:INFO:                 pip: 25.1.1
2025-07-06 13:46:59,617:INFO:          setuptools: 58.0.4
2025-07-06 13:46:59,617:INFO:             pycaret: 3.3.2
2025-07-06 13:46:59,617:INFO:             IPython: 8.18.1
2025-07-06 13:46:59,617:INFO:          ipywidgets: 8.1.7
2025-07-06 13:46:59,617:INFO:                tqdm: 4.67.1
2025-07-06 13:46:59,617:INFO:               numpy: 1.26.4
2025-07-06 13:46:59,618:INFO:              pandas: 2.1.4
2025-07-06 13:46:59,618:INFO:              jinja2: 3.1.6
2025-07-06 13:46:59,618:INFO:               scipy: 1.11.4
2025-07-06 13:46:59,618:INFO:              joblib: 1.3.2
2025-07-06 13:46:59,618:INFO:             sklearn: 1.4.2
2025-07-06 13:46:59,618:INFO:                pyod: 2.0.5
2025-07-06 13:46:59,618:INFO:            imblearn: 0.12.4
2025-07-06 13:46:59,618:INFO:   category_encoders: 2.6.4
2025-07-06 13:46:59,618:INFO:            lightgbm: 4.6.0
2025-07-06 13:46:59,618:INFO:               numba: 0.60.0
2025-07-06 13:46:59,618:INFO:            requests: 2.32.4
2025-07-06 13:46:59,618:INFO:          matplotlib: 3.7.5
2025-07-06 13:46:59,618:INFO:          scikitplot: 0.3.7
2025-07-06 13:46:59,618:INFO:         yellowbrick: 1.5
2025-07-06 13:46:59,618:INFO:              plotly: 5.24.1
2025-07-06 13:46:59,618:INFO:    plotly-resampler: Not installed
2025-07-06 13:46:59,618:INFO:             kaleido: 1.0.0
2025-07-06 13:46:59,619:INFO:           schemdraw: 0.15
2025-07-06 13:46:59,619:INFO:         statsmodels: 0.14.4
2025-07-06 13:46:59,619:INFO:              sktime: 0.26.0
2025-07-06 13:46:59,619:INFO:               tbats: 1.1.3
2025-07-06 13:46:59,619:INFO:            pmdarima: 2.0.4
2025-07-06 13:46:59,619:INFO:              psutil: 7.0.0
2025-07-06 13:46:59,619:INFO:          markupsafe: 3.0.2
2025-07-06 13:46:59,619:INFO:             pickle5: Not installed
2025-07-06 13:46:59,619:INFO:         cloudpickle: 3.1.1
2025-07-06 13:46:59,619:INFO:         deprecation: 2.1.0
2025-07-06 13:46:59,619:INFO:              xxhash: 3.5.0
2025-07-06 13:46:59,619:INFO:           wurlitzer: 3.1.1
2025-07-06 13:46:59,619:INFO:PyCaret optional dependencies:
2025-07-06 13:46:59,652:INFO:                shap: Not installed
2025-07-06 13:46:59,653:INFO:           interpret: Not installed
2025-07-06 13:46:59,653:INFO:                umap: Not installed
2025-07-06 13:46:59,653:INFO:     ydata_profiling: Not installed
2025-07-06 13:46:59,653:INFO:  explainerdashboard: Not installed
2025-07-06 13:46:59,653:INFO:             autoviz: Not installed
2025-07-06 13:46:59,653:INFO:           fairlearn: Not installed
2025-07-06 13:46:59,653:INFO:          deepchecks: Not installed
2025-07-06 13:46:59,653:INFO:             xgboost: Not installed
2025-07-06 13:46:59,653:INFO:            catboost: Not installed
2025-07-06 13:46:59,653:INFO:              kmodes: Not installed
2025-07-06 13:46:59,653:INFO:             mlxtend: Not installed
2025-07-06 13:46:59,653:INFO:       statsforecast: Not installed
2025-07-06 13:46:59,653:INFO:        tune_sklearn: Not installed
2025-07-06 13:46:59,653:INFO:                 ray: Not installed
2025-07-06 13:46:59,653:INFO:            hyperopt: Not installed
2025-07-06 13:46:59,653:INFO:              optuna: Not installed
2025-07-06 13:46:59,654:INFO:               skopt: Not installed
2025-07-06 13:46:59,654:INFO:              mlflow: Not installed
2025-07-06 13:46:59,654:INFO:              gradio: Not installed
2025-07-06 13:46:59,654:INFO:             fastapi: Not installed
2025-07-06 13:46:59,654:INFO:             uvicorn: Not installed
2025-07-06 13:46:59,654:INFO:              m2cgen: Not installed
2025-07-06 13:46:59,654:INFO:           evidently: Not installed
2025-07-06 13:46:59,654:INFO:               fugue: Not installed
2025-07-06 13:46:59,654:INFO:           streamlit: Not installed
2025-07-06 13:46:59,654:INFO:             prophet: Not installed
2025-07-06 13:46:59,654:INFO:None
2025-07-06 13:46:59,654:INFO:Set up data.
2025-07-06 13:46:59,679:INFO:Set up folding strategy.
2025-07-06 13:46:59,680:INFO:Set up train/test split.
2025-07-06 13:47:00,204:INFO:Set up index.
2025-07-06 13:47:00,205:INFO:Assigning column types.
2025-07-06 13:47:00,212:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-07-06 13:47:00,278:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-06 13:47:00,284:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 13:47:00,337:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:00,337:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:00,403:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-06 13:47:00,404:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 13:47:00,444:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:00,444:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:00,445:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-07-06 13:47:00,510:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 13:47:00,552:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:00,552:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:00,617:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 13:47:00,657:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:00,658:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:00,658:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-07-06 13:47:00,769:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:00,769:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:00,876:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:00,877:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:00,880:INFO:Preparing preprocessing pipeline...
2025-07-06 13:47:00,882:INFO:Set up label encoding.
2025-07-06 13:47:00,882:INFO:Set up simple imputation.
2025-07-06 13:47:00,889:INFO:Set up encoding of ordinal features.
2025-07-06 13:47:00,898:INFO:Set up encoding of categorical features.
2025-07-06 13:47:01,117:INFO:Finished creating preprocessing pipeline.
2025-07-06 13:47:01,179:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/2y/18nbyznn7vsdl07b243n6nph0000gp/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImp...
                                                               return_df=True,
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-07-06 13:47:01,179:INFO:Creating final display dataframe.
2025-07-06 13:47:01,888:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target                 y
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape         (764, 17)
5        Transformed data shape         (764, 44)
6   Transformed train set shape         (534, 44)
7    Transformed test set shape         (230, 44)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              69ea
2025-07-06 13:47:02,061:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:02,062:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:02,168:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:02,169:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:47:02,170:INFO:setup() successfully completed in 3.64s...............
2025-07-06 13:52:57,754:INFO:PyCaret ClassificationExperiment
2025-07-06 13:52:57,755:INFO:Logging name: clf-default-name
2025-07-06 13:52:57,755:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-07-06 13:52:57,755:INFO:version 3.3.2
2025-07-06 13:52:57,755:INFO:Initializing setup()
2025-07-06 13:52:57,755:INFO:self.USI: b4a6
2025-07-06 13:52:57,755:INFO:self._variable_keys: {'fold_generator', 'data', 'fold_groups_param', 'logging_param', 'idx', 'is_multiclass', 'fix_imbalance', 'fold_shuffle_param', 'exp_name_log', 'html_param', 'n_jobs_param', 'target_param', 'exp_id', 'memory', 'pipeline', 'gpu_param', 'y_test', 'gpu_n_jobs_param', 'USI', 'y', 'X_train', 'X', 'log_plots_param', 'seed', '_ml_usecase', 'X_test', '_available_plots', 'y_train'}
2025-07-06 13:52:57,755:INFO:Checking environment
2025-07-06 13:52:57,755:INFO:python_version: 3.9.6
2025-07-06 13:52:57,755:INFO:python_build: ('default', 'Feb  3 2024 15:58:28')
2025-07-06 13:52:57,755:INFO:machine: x86_64
2025-07-06 13:52:57,756:INFO:platform: macOS-14.4.1-x86_64-i386-64bit
2025-07-06 13:52:57,758:INFO:Memory: svmem(total=8589934592, available=2203394048, percent=74.3, used=4240613376, free=7233536, active=2199543808, inactive=2194612224, wired=2041069568)
2025-07-06 13:52:57,759:INFO:Physical Core: 4
2025-07-06 13:52:57,759:INFO:Logical Core: 8
2025-07-06 13:52:57,760:INFO:Checking libraries
2025-07-06 13:52:57,760:INFO:System:
2025-07-06 13:52:57,760:INFO:    python: 3.9.6 (default, Feb  3 2024, 15:58:28)  [Clang 15.0.0 (clang-1500.3.9.4)]
2025-07-06 13:52:57,760:INFO:executable: /Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/bin/python
2025-07-06 13:52:57,760:INFO:   machine: macOS-14.4.1-x86_64-i386-64bit
2025-07-06 13:52:57,760:INFO:PyCaret required dependencies:
2025-07-06 13:52:57,760:INFO:                 pip: 25.1.1
2025-07-06 13:52:57,760:INFO:          setuptools: 58.0.4
2025-07-06 13:52:57,760:INFO:             pycaret: 3.3.2
2025-07-06 13:52:57,760:INFO:             IPython: 8.18.1
2025-07-06 13:52:57,761:INFO:          ipywidgets: 8.1.7
2025-07-06 13:52:57,761:INFO:                tqdm: 4.67.1
2025-07-06 13:52:57,761:INFO:               numpy: 1.26.4
2025-07-06 13:52:57,761:INFO:              pandas: 2.1.4
2025-07-06 13:52:57,761:INFO:              jinja2: 3.1.6
2025-07-06 13:52:57,763:INFO:               scipy: 1.11.4
2025-07-06 13:52:57,765:INFO:              joblib: 1.3.2
2025-07-06 13:52:57,765:INFO:             sklearn: 1.4.2
2025-07-06 13:52:57,765:INFO:                pyod: 2.0.5
2025-07-06 13:52:57,766:INFO:            imblearn: 0.12.4
2025-07-06 13:52:57,766:INFO:   category_encoders: 2.6.4
2025-07-06 13:52:57,766:INFO:            lightgbm: 4.6.0
2025-07-06 13:52:57,767:INFO:               numba: 0.60.0
2025-07-06 13:52:57,767:INFO:            requests: 2.32.4
2025-07-06 13:52:57,768:INFO:          matplotlib: 3.7.5
2025-07-06 13:52:57,768:INFO:          scikitplot: 0.3.7
2025-07-06 13:52:57,768:INFO:         yellowbrick: 1.5
2025-07-06 13:52:57,769:INFO:              plotly: 5.24.1
2025-07-06 13:52:57,769:INFO:    plotly-resampler: Not installed
2025-07-06 13:52:57,769:INFO:             kaleido: 1.0.0
2025-07-06 13:52:57,770:INFO:           schemdraw: 0.15
2025-07-06 13:52:57,770:INFO:         statsmodels: 0.14.4
2025-07-06 13:52:57,770:INFO:              sktime: 0.26.0
2025-07-06 13:52:57,771:INFO:               tbats: 1.1.3
2025-07-06 13:52:57,771:INFO:            pmdarima: 2.0.4
2025-07-06 13:52:57,771:INFO:              psutil: 7.0.0
2025-07-06 13:52:57,771:INFO:          markupsafe: 3.0.2
2025-07-06 13:52:57,771:INFO:             pickle5: Not installed
2025-07-06 13:52:57,771:INFO:         cloudpickle: 3.1.1
2025-07-06 13:52:57,771:INFO:         deprecation: 2.1.0
2025-07-06 13:52:57,771:INFO:              xxhash: 3.5.0
2025-07-06 13:52:57,771:INFO:           wurlitzer: 3.1.1
2025-07-06 13:52:57,771:INFO:PyCaret optional dependencies:
2025-07-06 13:52:57,771:INFO:                shap: Not installed
2025-07-06 13:52:57,771:INFO:           interpret: Not installed
2025-07-06 13:52:57,771:INFO:                umap: Not installed
2025-07-06 13:52:57,771:INFO:     ydata_profiling: Not installed
2025-07-06 13:52:57,771:INFO:  explainerdashboard: Not installed
2025-07-06 13:52:57,771:INFO:             autoviz: Not installed
2025-07-06 13:52:57,772:INFO:           fairlearn: Not installed
2025-07-06 13:52:57,772:INFO:          deepchecks: Not installed
2025-07-06 13:52:57,772:INFO:             xgboost: Not installed
2025-07-06 13:52:57,772:INFO:            catboost: Not installed
2025-07-06 13:52:57,772:INFO:              kmodes: Not installed
2025-07-06 13:52:57,772:INFO:             mlxtend: Not installed
2025-07-06 13:52:57,772:INFO:       statsforecast: Not installed
2025-07-06 13:52:57,772:INFO:        tune_sklearn: Not installed
2025-07-06 13:52:57,772:INFO:                 ray: Not installed
2025-07-06 13:52:57,772:INFO:            hyperopt: Not installed
2025-07-06 13:52:57,772:INFO:              optuna: Not installed
2025-07-06 13:52:57,772:INFO:               skopt: Not installed
2025-07-06 13:52:57,772:INFO:              mlflow: Not installed
2025-07-06 13:52:57,772:INFO:              gradio: Not installed
2025-07-06 13:52:57,772:INFO:             fastapi: Not installed
2025-07-06 13:52:57,772:INFO:             uvicorn: Not installed
2025-07-06 13:52:57,772:INFO:              m2cgen: Not installed
2025-07-06 13:52:57,772:INFO:           evidently: Not installed
2025-07-06 13:52:57,772:INFO:               fugue: Not installed
2025-07-06 13:52:57,773:INFO:           streamlit: Not installed
2025-07-06 13:52:57,773:INFO:             prophet: Not installed
2025-07-06 13:52:57,773:INFO:None
2025-07-06 13:52:57,773:INFO:Set up data.
2025-07-06 13:52:57,789:INFO:Set up folding strategy.
2025-07-06 13:52:57,789:INFO:Set up train/test split.
2025-07-06 13:52:57,806:INFO:Set up index.
2025-07-06 13:52:57,806:INFO:Assigning column types.
2025-07-06 13:52:57,815:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-07-06 13:52:57,889:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-06 13:52:57,890:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 13:52:57,931:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:57,932:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:57,998:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-06 13:52:58,016:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 13:52:58,059:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:58,060:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:58,060:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-07-06 13:52:58,127:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 13:52:58,167:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:58,168:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:58,236:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-06 13:52:58,276:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:58,276:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:58,277:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-07-06 13:52:58,383:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:58,553:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:58,659:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:58,659:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:58,660:INFO:Preparing preprocessing pipeline...
2025-07-06 13:52:58,662:INFO:Set up label encoding.
2025-07-06 13:52:58,662:INFO:Set up simple imputation.
2025-07-06 13:52:58,669:INFO:Set up encoding of ordinal features.
2025-07-06 13:52:58,676:INFO:Set up encoding of categorical features.
2025-07-06 13:52:58,905:INFO:Finished creating preprocessing pipeline.
2025-07-06 13:52:58,968:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/2y/18nbyznn7vsdl07b243n6nph0000gp/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImp...
                                                               return_df=True,
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-07-06 13:52:58,968:INFO:Creating final display dataframe.
2025-07-06 13:52:59,152:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target                 y
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape         (764, 17)
5        Transformed data shape         (764, 44)
6   Transformed train set shape         (534, 44)
7    Transformed test set shape         (230, 44)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              b4a6
2025-07-06 13:52:59,258:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:59,258:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:59,364:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:59,364:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-06 13:52:59,366:INFO:setup() successfully completed in 1.66s...............
2025-07-06 13:52:59,381:INFO:Initializing compare_models()
2025-07-06 13:52:59,381:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-07-06 13:52:59,381:INFO:Checking exceptions
2025-07-06 13:52:59,390:INFO:Preparing display monitor
2025-07-06 13:52:59,501:INFO:Initializing Logistic Regression
2025-07-06 13:52:59,502:INFO:Total runtime is 1.2266635894775391e-05 minutes
2025-07-06 13:52:59,515:INFO:SubProcess create_model() called ==================================
2025-07-06 13:52:59,517:INFO:Initializing create_model()
2025-07-06 13:52:59,517:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:52:59,517:INFO:Checking exceptions
2025-07-06 13:52:59,517:INFO:Importing libraries
2025-07-06 13:52:59,517:INFO:Copying training dataset
2025-07-06 13:52:59,576:INFO:Defining folds
2025-07-06 13:52:59,576:INFO:Declaring metric variables
2025-07-06 13:52:59,587:INFO:Importing untrained model
2025-07-06 13:52:59,592:INFO:Logistic Regression Imported successfully
2025-07-06 13:52:59,688:INFO:Starting cross validation
2025-07-06 13:52:59,696:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:11,939:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 13:53:11,941:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 13:53:11,949:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 13:53:11,951:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 13:53:11,954:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 13:53:11,954:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 13:53:11,956:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 13:53:11,964:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 13:53:12,077:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,081:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,083:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,085:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,086:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,086:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,088:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,088:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,090:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,091:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,092:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,093:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,093:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,094:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,095:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,098:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,098:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,099:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,100:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,101:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,102:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,104:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,105:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,117:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,583:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 13:53:12,587:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-06 13:53:12,648:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,651:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,652:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,655:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,656:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,659:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:12,673:INFO:Calculating mean and std
2025-07-06 13:53:12,677:INFO:Creating metrics dataframe
2025-07-06 13:53:12,685:INFO:Uploading results into container
2025-07-06 13:53:12,686:INFO:Uploading model into container now
2025-07-06 13:53:12,688:INFO:_master_model_container: 1
2025-07-06 13:53:12,688:INFO:_display_container: 2
2025-07-06 13:53:12,689:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-07-06 13:53:12,689:INFO:create_model() successfully completed......................................
2025-07-06 13:53:12,840:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:12,841:INFO:Creating metrics dataframe
2025-07-06 13:53:12,852:INFO:Initializing K Neighbors Classifier
2025-07-06 13:53:12,853:INFO:Total runtime is 0.2225268801053365 minutes
2025-07-06 13:53:12,860:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:12,861:INFO:Initializing create_model()
2025-07-06 13:53:12,861:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:12,861:INFO:Checking exceptions
2025-07-06 13:53:12,861:INFO:Importing libraries
2025-07-06 13:53:12,861:INFO:Copying training dataset
2025-07-06 13:53:12,874:INFO:Defining folds
2025-07-06 13:53:12,874:INFO:Declaring metric variables
2025-07-06 13:53:12,886:INFO:Importing untrained model
2025-07-06 13:53:12,892:INFO:K Neighbors Classifier Imported successfully
2025-07-06 13:53:12,909:INFO:Starting cross validation
2025-07-06 13:53:12,914:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:13,708:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,710:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,712:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,722:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,722:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,723:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,723:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,724:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,729:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,729:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,733:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,734:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,735:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,739:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,741:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,743:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,745:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,755:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,755:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,756:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,762:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,763:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,766:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:13,773:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,042:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,044:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,047:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,052:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,054:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,056:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,069:INFO:Calculating mean and std
2025-07-06 13:53:14,071:INFO:Creating metrics dataframe
2025-07-06 13:53:14,074:INFO:Uploading results into container
2025-07-06 13:53:14,074:INFO:Uploading model into container now
2025-07-06 13:53:14,075:INFO:_master_model_container: 2
2025-07-06 13:53:14,075:INFO:_display_container: 2
2025-07-06 13:53:14,075:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-07-06 13:53:14,075:INFO:create_model() successfully completed......................................
2025-07-06 13:53:14,157:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:14,158:INFO:Creating metrics dataframe
2025-07-06 13:53:14,173:INFO:Initializing Naive Bayes
2025-07-06 13:53:14,173:INFO:Total runtime is 0.24453636805216472 minutes
2025-07-06 13:53:14,178:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:14,180:INFO:Initializing create_model()
2025-07-06 13:53:14,181:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:14,181:INFO:Checking exceptions
2025-07-06 13:53:14,181:INFO:Importing libraries
2025-07-06 13:53:14,181:INFO:Copying training dataset
2025-07-06 13:53:14,192:INFO:Defining folds
2025-07-06 13:53:14,193:INFO:Declaring metric variables
2025-07-06 13:53:14,203:INFO:Importing untrained model
2025-07-06 13:53:14,210:INFO:Naive Bayes Imported successfully
2025-07-06 13:53:14,235:INFO:Starting cross validation
2025-07-06 13:53:14,242:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:14,672:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,675:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,678:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,686:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,686:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,687:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,689:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,689:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,693:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,693:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,694:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,696:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,698:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,700:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,702:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,704:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,705:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,706:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,713:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,713:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,713:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,720:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,720:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,724:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,926:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,927:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,931:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,932:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,936:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,937:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:14,952:INFO:Calculating mean and std
2025-07-06 13:53:14,954:INFO:Creating metrics dataframe
2025-07-06 13:53:14,957:INFO:Uploading results into container
2025-07-06 13:53:14,958:INFO:Uploading model into container now
2025-07-06 13:53:14,959:INFO:_master_model_container: 3
2025-07-06 13:53:14,959:INFO:_display_container: 2
2025-07-06 13:53:14,959:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-07-06 13:53:14,959:INFO:create_model() successfully completed......................................
2025-07-06 13:53:15,052:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:15,053:INFO:Creating metrics dataframe
2025-07-06 13:53:15,073:INFO:Initializing Decision Tree Classifier
2025-07-06 13:53:15,073:INFO:Total runtime is 0.2595280289649963 minutes
2025-07-06 13:53:15,085:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:15,087:INFO:Initializing create_model()
2025-07-06 13:53:15,087:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:15,087:INFO:Checking exceptions
2025-07-06 13:53:15,087:INFO:Importing libraries
2025-07-06 13:53:15,087:INFO:Copying training dataset
2025-07-06 13:53:15,112:INFO:Defining folds
2025-07-06 13:53:15,112:INFO:Declaring metric variables
2025-07-06 13:53:15,123:INFO:Importing untrained model
2025-07-06 13:53:15,134:INFO:Decision Tree Classifier Imported successfully
2025-07-06 13:53:15,153:INFO:Starting cross validation
2025-07-06 13:53:15,158:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:15,619:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,621:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,626:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,627:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,629:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,634:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,637:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,638:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,638:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,641:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,644:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,646:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,649:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,650:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,655:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,656:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,656:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,658:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,660:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,663:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,664:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,671:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,671:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,675:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,878:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,879:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,883:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,885:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,887:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,889:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:15,900:INFO:Calculating mean and std
2025-07-06 13:53:15,902:INFO:Creating metrics dataframe
2025-07-06 13:53:15,904:INFO:Uploading results into container
2025-07-06 13:53:15,905:INFO:Uploading model into container now
2025-07-06 13:53:15,905:INFO:_master_model_container: 4
2025-07-06 13:53:15,906:INFO:_display_container: 2
2025-07-06 13:53:15,906:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-07-06 13:53:15,907:INFO:create_model() successfully completed......................................
2025-07-06 13:53:15,985:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:15,985:INFO:Creating metrics dataframe
2025-07-06 13:53:16,005:INFO:Initializing SVM - Linear Kernel
2025-07-06 13:53:16,006:INFO:Total runtime is 0.27507173220316566 minutes
2025-07-06 13:53:16,014:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:16,056:INFO:Initializing create_model()
2025-07-06 13:53:16,056:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:16,056:INFO:Checking exceptions
2025-07-06 13:53:16,057:INFO:Importing libraries
2025-07-06 13:53:16,075:INFO:Copying training dataset
2025-07-06 13:53:16,091:INFO:Defining folds
2025-07-06 13:53:16,092:INFO:Declaring metric variables
2025-07-06 13:53:16,104:INFO:Importing untrained model
2025-07-06 13:53:16,116:INFO:SVM - Linear Kernel Imported successfully
2025-07-06 13:53:16,131:INFO:Starting cross validation
2025-07-06 13:53:16,135:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:16,635:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,642:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,645:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,647:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,648:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,649:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,652:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,654:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,655:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,659:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,661:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,663:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,670:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,677:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,682:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,684:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,684:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,688:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,690:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,691:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,694:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,697:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,698:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,703:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,886:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,890:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,892:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,894:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,897:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,901:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:16,915:INFO:Calculating mean and std
2025-07-06 13:53:16,917:INFO:Creating metrics dataframe
2025-07-06 13:53:16,919:INFO:Uploading results into container
2025-07-06 13:53:16,920:INFO:Uploading model into container now
2025-07-06 13:53:16,920:INFO:_master_model_container: 5
2025-07-06 13:53:16,921:INFO:_display_container: 2
2025-07-06 13:53:16,921:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-07-06 13:53:16,921:INFO:create_model() successfully completed......................................
2025-07-06 13:53:16,993:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:16,993:INFO:Creating metrics dataframe
2025-07-06 13:53:17,009:INFO:Initializing Ridge Classifier
2025-07-06 13:53:17,009:INFO:Total runtime is 0.29179611206054684 minutes
2025-07-06 13:53:17,016:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:17,017:INFO:Initializing create_model()
2025-07-06 13:53:17,017:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:17,017:INFO:Checking exceptions
2025-07-06 13:53:17,017:INFO:Importing libraries
2025-07-06 13:53:17,017:INFO:Copying training dataset
2025-07-06 13:53:17,026:INFO:Defining folds
2025-07-06 13:53:17,026:INFO:Declaring metric variables
2025-07-06 13:53:17,037:INFO:Importing untrained model
2025-07-06 13:53:17,045:INFO:Ridge Classifier Imported successfully
2025-07-06 13:53:17,059:INFO:Starting cross validation
2025-07-06 13:53:17,065:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:17,480:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,482:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,487:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,487:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,490:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,494:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,494:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,498:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,502:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,503:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,508:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,510:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,514:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,519:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,520:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,521:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,526:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,527:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,528:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,537:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,543:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,545:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,550:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,555:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,740:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,744:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,744:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,749:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,749:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,753:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:17,760:INFO:Calculating mean and std
2025-07-06 13:53:17,762:INFO:Creating metrics dataframe
2025-07-06 13:53:17,765:INFO:Uploading results into container
2025-07-06 13:53:17,765:INFO:Uploading model into container now
2025-07-06 13:53:17,766:INFO:_master_model_container: 6
2025-07-06 13:53:17,766:INFO:_display_container: 2
2025-07-06 13:53:17,766:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-07-06 13:53:17,767:INFO:create_model() successfully completed......................................
2025-07-06 13:53:17,839:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:17,839:INFO:Creating metrics dataframe
2025-07-06 13:53:17,856:INFO:Initializing Random Forest Classifier
2025-07-06 13:53:17,856:INFO:Total runtime is 0.30591932932535804 minutes
2025-07-06 13:53:17,861:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:17,862:INFO:Initializing create_model()
2025-07-06 13:53:17,862:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:17,863:INFO:Checking exceptions
2025-07-06 13:53:17,863:INFO:Importing libraries
2025-07-06 13:53:17,864:INFO:Copying training dataset
2025-07-06 13:53:17,875:INFO:Defining folds
2025-07-06 13:53:17,875:INFO:Declaring metric variables
2025-07-06 13:53:17,885:INFO:Importing untrained model
2025-07-06 13:53:17,892:INFO:Random Forest Classifier Imported successfully
2025-07-06 13:53:17,905:INFO:Starting cross validation
2025-07-06 13:53:17,961:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:18,941:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,944:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,952:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,953:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,960:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,960:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,961:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,967:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,974:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,974:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,983:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,984:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,990:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:18,997:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 13:53:18,997:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,001:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,010:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,026:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,033:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,068:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,072:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,076:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,168:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,172:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,176:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,500:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,501:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,505:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,505:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,509:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,509:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:19,526:INFO:Calculating mean and std
2025-07-06 13:53:19,532:INFO:Creating metrics dataframe
2025-07-06 13:53:19,539:INFO:Uploading results into container
2025-07-06 13:53:19,540:INFO:Uploading model into container now
2025-07-06 13:53:19,541:INFO:_master_model_container: 7
2025-07-06 13:53:19,541:INFO:_display_container: 2
2025-07-06 13:53:19,541:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-07-06 13:53:19,542:INFO:create_model() successfully completed......................................
2025-07-06 13:53:19,619:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:19,619:INFO:Creating metrics dataframe
2025-07-06 13:53:19,633:INFO:Initializing Quadratic Discriminant Analysis
2025-07-06 13:53:19,634:INFO:Total runtime is 0.33554159800211586 minutes
2025-07-06 13:53:19,640:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:19,640:INFO:Initializing create_model()
2025-07-06 13:53:19,640:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:19,641:INFO:Checking exceptions
2025-07-06 13:53:19,641:INFO:Importing libraries
2025-07-06 13:53:19,641:INFO:Copying training dataset
2025-07-06 13:53:19,652:INFO:Defining folds
2025-07-06 13:53:19,652:INFO:Declaring metric variables
2025-07-06 13:53:19,660:INFO:Importing untrained model
2025-07-06 13:53:19,671:INFO:Quadratic Discriminant Analysis Imported successfully
2025-07-06 13:53:19,689:INFO:Starting cross validation
2025-07-06 13:53:19,694:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:20,037:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 13:53:20,038:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 13:53:20,040:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 13:53:20,040:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 13:53:20,052:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 13:53:20,053:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 13:53:20,060:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 13:53:20,061:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 13:53:20,184:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,186:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,198:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,198:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,199:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,205:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,205:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,205:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,209:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,212:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,212:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,215:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,216:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,219:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,219:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,221:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,224:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,227:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,228:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,227:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,236:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,236:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,236:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,243:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,387:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 13:53:20,388:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-06 13:53:20,451:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,451:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,454:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,455:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,458:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,459:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:20,471:INFO:Calculating mean and std
2025-07-06 13:53:20,472:INFO:Creating metrics dataframe
2025-07-06 13:53:20,475:INFO:Uploading results into container
2025-07-06 13:53:20,475:INFO:Uploading model into container now
2025-07-06 13:53:20,476:INFO:_master_model_container: 8
2025-07-06 13:53:20,476:INFO:_display_container: 2
2025-07-06 13:53:20,476:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-07-06 13:53:20,476:INFO:create_model() successfully completed......................................
2025-07-06 13:53:20,551:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:20,551:INFO:Creating metrics dataframe
2025-07-06 13:53:20,566:INFO:Initializing Ada Boost Classifier
2025-07-06 13:53:20,567:INFO:Total runtime is 0.35109351476033523 minutes
2025-07-06 13:53:20,573:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:20,573:INFO:Initializing create_model()
2025-07-06 13:53:20,573:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:20,574:INFO:Checking exceptions
2025-07-06 13:53:20,574:INFO:Importing libraries
2025-07-06 13:53:20,574:INFO:Copying training dataset
2025-07-06 13:53:20,588:INFO:Defining folds
2025-07-06 13:53:20,588:INFO:Declaring metric variables
2025-07-06 13:53:20,594:INFO:Importing untrained model
2025-07-06 13:53:20,603:INFO:Ada Boost Classifier Imported successfully
2025-07-06 13:53:20,620:INFO:Starting cross validation
2025-07-06 13:53:20,625:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:20,936:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 13:53:20,941:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 13:53:20,948:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 13:53:20,956:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 13:53:20,963:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 13:53:20,967:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 13:53:20,971:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 13:53:20,978:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 13:53:21,304:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,311:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,311:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,313:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,318:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,319:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,320:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,323:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,326:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,326:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,330:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,333:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,333:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,336:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,339:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,339:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,339:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,346:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,346:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,347:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,347:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,353:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,353:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,357:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,491:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 13:53:21,492:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/ensemble/_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-06 13:53:21,758:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,758:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,762:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,762:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,767:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,767:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:21,775:INFO:Calculating mean and std
2025-07-06 13:53:21,777:INFO:Creating metrics dataframe
2025-07-06 13:53:21,780:INFO:Uploading results into container
2025-07-06 13:53:21,781:INFO:Uploading model into container now
2025-07-06 13:53:21,782:INFO:_master_model_container: 9
2025-07-06 13:53:21,782:INFO:_display_container: 2
2025-07-06 13:53:21,782:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-07-06 13:53:21,782:INFO:create_model() successfully completed......................................
2025-07-06 13:53:21,858:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:21,858:INFO:Creating metrics dataframe
2025-07-06 13:53:21,873:INFO:Initializing Gradient Boosting Classifier
2025-07-06 13:53:21,873:INFO:Total runtime is 0.37286761204401647 minutes
2025-07-06 13:53:21,879:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:21,881:INFO:Initializing create_model()
2025-07-06 13:53:21,881:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:21,881:INFO:Checking exceptions
2025-07-06 13:53:21,881:INFO:Importing libraries
2025-07-06 13:53:21,881:INFO:Copying training dataset
2025-07-06 13:53:21,891:INFO:Defining folds
2025-07-06 13:53:21,891:INFO:Declaring metric variables
2025-07-06 13:53:21,899:INFO:Importing untrained model
2025-07-06 13:53:21,908:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 13:53:21,926:INFO:Starting cross validation
2025-07-06 13:53:21,932:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:22,920:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,927:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,934:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,940:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,941:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,950:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,954:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,961:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,954:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,966:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,982:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,982:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,983:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,985:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,989:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,990:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,992:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:22,997:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,004:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,006:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,006:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,011:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,011:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,019:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,531:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,533:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,536:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,538:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,543:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,543:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:23,556:INFO:Calculating mean and std
2025-07-06 13:53:23,558:INFO:Creating metrics dataframe
2025-07-06 13:53:23,561:INFO:Uploading results into container
2025-07-06 13:53:23,562:INFO:Uploading model into container now
2025-07-06 13:53:23,562:INFO:_master_model_container: 10
2025-07-06 13:53:23,562:INFO:_display_container: 2
2025-07-06 13:53:23,563:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 13:53:23,564:INFO:create_model() successfully completed......................................
2025-07-06 13:53:23,643:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:23,644:INFO:Creating metrics dataframe
2025-07-06 13:53:23,663:INFO:Initializing Linear Discriminant Analysis
2025-07-06 13:53:23,663:INFO:Total runtime is 0.40269658168156935 minutes
2025-07-06 13:53:23,668:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:23,669:INFO:Initializing create_model()
2025-07-06 13:53:23,670:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:23,670:INFO:Checking exceptions
2025-07-06 13:53:23,670:INFO:Importing libraries
2025-07-06 13:53:23,671:INFO:Copying training dataset
2025-07-06 13:53:23,690:INFO:Defining folds
2025-07-06 13:53:23,690:INFO:Declaring metric variables
2025-07-06 13:53:23,698:INFO:Importing untrained model
2025-07-06 13:53:23,711:INFO:Linear Discriminant Analysis Imported successfully
2025-07-06 13:53:23,730:INFO:Starting cross validation
2025-07-06 13:53:23,735:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:24,260:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,261:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,265:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,265:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,266:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,267:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,267:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,268:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,270:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,270:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,272:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,272:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,273:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,274:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,275:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,275:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,277:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,277:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,278:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,279:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,280:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,281:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,284:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,285:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,496:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,496:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,500:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,500:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,504:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,504:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:24,521:INFO:Calculating mean and std
2025-07-06 13:53:24,523:INFO:Creating metrics dataframe
2025-07-06 13:53:24,525:INFO:Uploading results into container
2025-07-06 13:53:24,526:INFO:Uploading model into container now
2025-07-06 13:53:24,526:INFO:_master_model_container: 11
2025-07-06 13:53:24,527:INFO:_display_container: 2
2025-07-06 13:53:24,527:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-07-06 13:53:24,528:INFO:create_model() successfully completed......................................
2025-07-06 13:53:24,603:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:24,603:INFO:Creating metrics dataframe
2025-07-06 13:53:24,619:INFO:Initializing Extra Trees Classifier
2025-07-06 13:53:24,620:INFO:Total runtime is 0.41864076455434157 minutes
2025-07-06 13:53:24,626:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:24,627:INFO:Initializing create_model()
2025-07-06 13:53:24,627:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:24,627:INFO:Checking exceptions
2025-07-06 13:53:24,627:INFO:Importing libraries
2025-07-06 13:53:24,627:INFO:Copying training dataset
2025-07-06 13:53:24,641:INFO:Defining folds
2025-07-06 13:53:24,641:INFO:Declaring metric variables
2025-07-06 13:53:24,671:INFO:Importing untrained model
2025-07-06 13:53:24,676:INFO:Extra Trees Classifier Imported successfully
2025-07-06 13:53:24,691:INFO:Starting cross validation
2025-07-06 13:53:24,695:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:25,672:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,693:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,704:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,723:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,725:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,734:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,736:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,740:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,755:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,757:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,765:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,769:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,840:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,846:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,851:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,860:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,866:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,871:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,874:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,880:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,885:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,902:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,907:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:25,911:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:26,233:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:26,237:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:26,241:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:26,247:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:26,252:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:26,256:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:26,265:INFO:Calculating mean and std
2025-07-06 13:53:26,266:INFO:Creating metrics dataframe
2025-07-06 13:53:26,269:INFO:Uploading results into container
2025-07-06 13:53:26,269:INFO:Uploading model into container now
2025-07-06 13:53:26,270:INFO:_master_model_container: 12
2025-07-06 13:53:26,270:INFO:_display_container: 2
2025-07-06 13:53:26,271:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-07-06 13:53:26,271:INFO:create_model() successfully completed......................................
2025-07-06 13:53:26,343:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:26,344:INFO:Creating metrics dataframe
2025-07-06 13:53:26,359:INFO:Initializing Light Gradient Boosting Machine
2025-07-06 13:53:26,360:INFO:Total runtime is 0.44764541387557977 minutes
2025-07-06 13:53:26,367:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:26,368:INFO:Initializing create_model()
2025-07-06 13:53:26,368:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:26,368:INFO:Checking exceptions
2025-07-06 13:53:26,369:INFO:Importing libraries
2025-07-06 13:53:26,369:INFO:Copying training dataset
2025-07-06 13:53:26,381:INFO:Defining folds
2025-07-06 13:53:26,381:INFO:Declaring metric variables
2025-07-06 13:53:26,388:INFO:Importing untrained model
2025-07-06 13:53:26,400:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-06 13:53:26,414:INFO:Starting cross validation
2025-07-06 13:53:26,420:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:31,860:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:31,868:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:31,873:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:31,984:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:31,992:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,001:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,028:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,037:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,045:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,181:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,189:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,196:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,209:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,216:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,223:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,257:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,265:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,272:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,330:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,336:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,342:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,396:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,403:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:32,416:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:33,342:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:33,347:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:33,354:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:33,427:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:33,436:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:33,441:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:33,458:INFO:Calculating mean and std
2025-07-06 13:53:33,460:INFO:Creating metrics dataframe
2025-07-06 13:53:33,465:INFO:Uploading results into container
2025-07-06 13:53:33,466:INFO:Uploading model into container now
2025-07-06 13:53:33,468:INFO:_master_model_container: 13
2025-07-06 13:53:33,469:INFO:_display_container: 2
2025-07-06 13:53:33,471:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-06 13:53:33,472:INFO:create_model() successfully completed......................................
2025-07-06 13:53:33,570:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:33,571:INFO:Creating metrics dataframe
2025-07-06 13:53:33,589:INFO:Initializing Dummy Classifier
2025-07-06 13:53:33,589:INFO:Total runtime is 0.5681361476580301 minutes
2025-07-06 13:53:33,597:INFO:SubProcess create_model() called ==================================
2025-07-06 13:53:33,597:INFO:Initializing create_model()
2025-07-06 13:53:33,598:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x13754e0a0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:33,598:INFO:Checking exceptions
2025-07-06 13:53:33,598:INFO:Importing libraries
2025-07-06 13:53:33,599:INFO:Copying training dataset
2025-07-06 13:53:33,609:INFO:Defining folds
2025-07-06 13:53:33,610:INFO:Declaring metric variables
2025-07-06 13:53:33,619:INFO:Importing untrained model
2025-07-06 13:53:33,632:INFO:Dummy Classifier Imported successfully
2025-07-06 13:53:33,645:INFO:Starting cross validation
2025-07-06 13:53:33,654:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-06 13:53:34,131:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,138:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,141:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 13:53:34,142:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,147:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,150:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,151:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,152:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,155:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 13:53:34,155:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,157:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,158:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,158:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,161:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,161:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 13:53:34,163:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,163:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 13:53:34,166:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,166:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 13:53:34,167:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,168:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,170:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,170:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,171:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 13:53:34,175:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,176:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,180:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 13:53:34,184:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,191:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,196:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,198:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 13:53:34,200:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,369:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,372:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,374:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 13:53:34,376:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,377:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,382:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,384:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-06 13:53:34,386:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:53:34,396:INFO:Calculating mean and std
2025-07-06 13:53:34,398:INFO:Creating metrics dataframe
2025-07-06 13:53:34,400:INFO:Uploading results into container
2025-07-06 13:53:34,401:INFO:Uploading model into container now
2025-07-06 13:53:34,402:INFO:_master_model_container: 14
2025-07-06 13:53:34,402:INFO:_display_container: 2
2025-07-06 13:53:34,402:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-07-06 13:53:34,402:INFO:create_model() successfully completed......................................
2025-07-06 13:53:34,476:INFO:SubProcess create_model() end ==================================
2025-07-06 13:53:34,476:INFO:Creating metrics dataframe
2025-07-06 13:53:34,511:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/pycaret/internal/pycaret_experiment/supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-07-06 13:53:34,525:INFO:Initializing create_model()
2025-07-06 13:53:34,526:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:53:34,526:INFO:Checking exceptions
2025-07-06 13:53:34,529:INFO:Importing libraries
2025-07-06 13:53:34,530:INFO:Copying training dataset
2025-07-06 13:53:34,555:INFO:Defining folds
2025-07-06 13:53:34,555:INFO:Declaring metric variables
2025-07-06 13:53:34,556:INFO:Importing untrained model
2025-07-06 13:53:34,556:INFO:Declaring custom model
2025-07-06 13:53:34,557:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 13:53:34,560:INFO:Cross validation set to False
2025-07-06 13:53:34,560:INFO:Fitting Model
2025-07-06 13:53:34,992:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 13:53:34,992:INFO:create_model() successfully completed......................................
2025-07-06 13:53:35,113:INFO:_master_model_container: 14
2025-07-06 13:53:35,114:INFO:_display_container: 2
2025-07-06 13:53:35,118:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 13:53:35,119:INFO:compare_models() successfully completed......................................
2025-07-06 13:54:48,492:INFO:Initializing finalize_model()
2025-07-06 13:54:48,495:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-07-06 13:54:48,495:INFO:Finalizing GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 13:54:48,501:INFO:Initializing create_model()
2025-07-06 13:54:48,501:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 13:54:48,501:INFO:Checking exceptions
2025-07-06 13:54:48,509:INFO:Importing libraries
2025-07-06 13:54:48,509:INFO:Copying training dataset
2025-07-06 13:54:48,511:INFO:Defining folds
2025-07-06 13:54:48,512:INFO:Declaring metric variables
2025-07-06 13:54:48,512:INFO:Importing untrained model
2025-07-06 13:54:48,512:INFO:Declaring custom model
2025-07-06 13:54:48,514:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 13:54:48,518:INFO:Cross validation set to False
2025-07-06 13:54:48,518:INFO:Fitting Model
2025-07-06 13:54:49,035:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-06 13:54:49,035:INFO:create_model() successfully completed......................................
2025-07-06 13:54:49,110:INFO:_master_model_container: 14
2025-07-06 13:54:49,111:INFO:_display_container: 2
2025-07-06 13:54:49,188:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-06 13:54:49,188:INFO:finalize_model() successfully completed......................................
2025-07-06 13:54:49,333:INFO:Initializing predict_model()
2025-07-06 13:54:49,333:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x137852c10>)
2025-07-06 13:54:49,333:INFO:Checking exceptions
2025-07-06 13:54:49,333:INFO:Preloading libraries
2025-07-06 13:54:49,336:INFO:Set up data.
2025-07-06 13:54:49,347:INFO:Set up index.
2025-07-06 13:54:49,437:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:54:49,441:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 13:54:49,445:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 14:00:55,577:INFO:Initializing plot_model()
2025-07-06 14:00:55,578:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, system=True)
2025-07-06 14:00:55,579:INFO:Checking exceptions
2025-07-06 14:00:55,603:INFO:Preloading libraries
2025-07-06 14:00:55,641:INFO:Copying training dataset
2025-07-06 14:00:55,641:INFO:Plot type: confusion_matrix
2025-07-06 14:00:55,865:INFO:Fitting Model
2025-07-06 14:00:55,898:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/base.py:493: UserWarning: X does not have valid feature names, but GradientBoostingClassifier was fitted with feature names
  warnings.warn(

2025-07-06 14:00:55,899:INFO:Scoring test/hold-out set
2025-07-06 14:00:56,233:INFO:Visual Rendered Successfully
2025-07-06 14:00:56,410:INFO:plot_model() successfully completed......................................
2025-07-06 14:00:56,429:INFO:Initializing finalize_model()
2025-07-06 14:00:56,429:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-07-06 14:00:56,430:INFO:Finalizing GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 14:00:56,438:INFO:Initializing create_model()
2025-07-06 14:00:56,439:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 14:00:56,439:INFO:Checking exceptions
2025-07-06 14:00:56,443:INFO:Importing libraries
2025-07-06 14:00:56,443:INFO:Copying training dataset
2025-07-06 14:00:56,445:INFO:Defining folds
2025-07-06 14:00:56,445:INFO:Declaring metric variables
2025-07-06 14:00:56,446:INFO:Importing untrained model
2025-07-06 14:00:56,447:INFO:Declaring custom model
2025-07-06 14:00:56,447:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 14:00:56,451:INFO:Cross validation set to False
2025-07-06 14:00:56,451:INFO:Fitting Model
2025-07-06 14:00:56,988:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-06 14:00:56,988:INFO:create_model() successfully completed......................................
2025-07-06 14:00:57,064:INFO:_master_model_container: 14
2025-07-06 14:00:57,064:INFO:_display_container: 3
2025-07-06 14:00:57,140:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-06 14:00:57,140:INFO:finalize_model() successfully completed......................................
2025-07-06 14:00:57,307:INFO:Initializing predict_model()
2025-07-06 14:00:57,307:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x137706820>)
2025-07-06 14:00:57,307:INFO:Checking exceptions
2025-07-06 14:00:57,307:INFO:Preloading libraries
2025-07-06 14:00:57,310:INFO:Set up data.
2025-07-06 14:00:57,323:INFO:Set up index.
2025-07-06 14:00:57,548:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 14:00:57,557:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 14:00:57,565:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 14:01:36,667:INFO:Initializing plot_model()
2025-07-06 14:01:36,667:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, system=True)
2025-07-06 14:01:36,667:INFO:Checking exceptions
2025-07-06 14:01:36,679:INFO:Preloading libraries
2025-07-06 14:01:36,692:INFO:Copying training dataset
2025-07-06 14:01:36,692:INFO:Plot type: auc
2025-07-06 14:01:36,882:INFO:Fitting Model
2025-07-06 14:01:36,882:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/base.py:493: UserWarning: X does not have valid feature names, but GradientBoostingClassifier was fitted with feature names
  warnings.warn(

2025-07-06 14:01:36,883:INFO:Scoring test/hold-out set
2025-07-06 14:01:37,238:INFO:Visual Rendered Successfully
2025-07-06 14:01:37,314:INFO:plot_model() successfully completed......................................
2025-07-06 14:01:37,351:INFO:Initializing finalize_model()
2025-07-06 14:01:37,352:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-07-06 14:01:37,354:INFO:Finalizing GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 14:01:37,362:INFO:Initializing create_model()
2025-07-06 14:01:37,362:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 14:01:37,362:INFO:Checking exceptions
2025-07-06 14:01:37,365:INFO:Importing libraries
2025-07-06 14:01:37,365:INFO:Copying training dataset
2025-07-06 14:01:37,368:INFO:Defining folds
2025-07-06 14:01:37,368:INFO:Declaring metric variables
2025-07-06 14:01:37,370:INFO:Importing untrained model
2025-07-06 14:01:37,371:INFO:Declaring custom model
2025-07-06 14:01:37,374:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 14:01:37,431:INFO:Cross validation set to False
2025-07-06 14:01:37,432:INFO:Fitting Model
2025-07-06 14:01:38,000:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-06 14:01:38,001:INFO:create_model() successfully completed......................................
2025-07-06 14:01:38,078:INFO:_master_model_container: 14
2025-07-06 14:01:38,078:INFO:_display_container: 4
2025-07-06 14:01:38,158:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-06 14:01:38,158:INFO:finalize_model() successfully completed......................................
2025-07-06 14:01:38,327:INFO:Initializing predict_model()
2025-07-06 14:01:38,327:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x1381479d0>)
2025-07-06 14:01:38,327:INFO:Checking exceptions
2025-07-06 14:01:38,327:INFO:Preloading libraries
2025-07-06 14:01:38,330:INFO:Set up data.
2025-07-06 14:01:38,341:INFO:Set up index.
2025-07-06 14:01:38,418:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 14:01:38,421:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 14:01:38,424:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 14:02:09,697:INFO:Initializing plot_model()
2025-07-06 14:02:09,698:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, system=True)
2025-07-06 14:02:09,698:INFO:Checking exceptions
2025-07-06 14:02:09,711:INFO:Preloading libraries
2025-07-06 14:02:09,724:INFO:Copying training dataset
2025-07-06 14:02:09,725:INFO:Plot type: feature
2025-07-06 14:02:09,727:WARNING:No coef_ found. Trying feature_importances_
2025-07-06 14:02:10,053:INFO:Visual Rendered Successfully
2025-07-06 14:02:10,150:INFO:plot_model() successfully completed......................................
2025-07-06 14:02:10,178:INFO:Initializing finalize_model()
2025-07-06 14:02:10,179:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-07-06 14:02:10,180:INFO:Finalizing GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 14:02:10,188:INFO:Initializing create_model()
2025-07-06 14:02:10,188:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 14:02:10,188:INFO:Checking exceptions
2025-07-06 14:02:10,190:INFO:Importing libraries
2025-07-06 14:02:10,190:INFO:Copying training dataset
2025-07-06 14:02:10,191:INFO:Defining folds
2025-07-06 14:02:10,191:INFO:Declaring metric variables
2025-07-06 14:02:10,192:INFO:Importing untrained model
2025-07-06 14:02:10,194:INFO:Declaring custom model
2025-07-06 14:02:10,196:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 14:02:10,202:INFO:Cross validation set to False
2025-07-06 14:02:10,202:INFO:Fitting Model
2025-07-06 14:02:10,771:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-06 14:02:10,771:INFO:create_model() successfully completed......................................
2025-07-06 14:02:10,845:INFO:_master_model_container: 14
2025-07-06 14:02:10,845:INFO:_display_container: 5
2025-07-06 14:02:10,908:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-06 14:02:10,909:INFO:finalize_model() successfully completed......................................
2025-07-06 14:02:11,080:INFO:Initializing predict_model()
2025-07-06 14:02:11,080:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x1375a5ee0>)
2025-07-06 14:02:11,080:INFO:Checking exceptions
2025-07-06 14:02:11,080:INFO:Preloading libraries
2025-07-06 14:02:11,084:INFO:Set up data.
2025-07-06 14:02:11,099:INFO:Set up index.
2025-07-06 14:02:11,194:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 14:02:11,197:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 14:02:11,201:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 14:02:29,341:INFO:Initializing plot_model()
2025-07-06 14:02:29,342:INFO:plot_model(plot=learning, fold=None, verbose=True, display=None, display_format=None, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, system=True)
2025-07-06 14:02:29,342:INFO:Checking exceptions
2025-07-06 14:02:29,354:INFO:Preloading libraries
2025-07-06 14:02:29,373:INFO:Copying training dataset
2025-07-06 14:02:29,373:INFO:Plot type: learning
2025-07-06 14:02:29,563:INFO:Fitting Model
2025-07-06 14:02:44,143:INFO:Visual Rendered Successfully
2025-07-06 14:02:44,321:INFO:plot_model() successfully completed......................................
2025-07-06 14:02:44,340:INFO:Initializing finalize_model()
2025-07-06 14:02:44,340:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-07-06 14:02:44,341:INFO:Finalizing GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-06 14:02:44,349:INFO:Initializing create_model()
2025-07-06 14:02:44,349:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-07-06 14:02:44,350:INFO:Checking exceptions
2025-07-06 14:02:44,352:INFO:Importing libraries
2025-07-06 14:02:44,352:INFO:Copying training dataset
2025-07-06 14:02:44,353:INFO:Defining folds
2025-07-06 14:02:44,353:INFO:Declaring metric variables
2025-07-06 14:02:44,354:INFO:Importing untrained model
2025-07-06 14:02:44,354:INFO:Declaring custom model
2025-07-06 14:02:44,357:INFO:Gradient Boosting Classifier Imported successfully
2025-07-06 14:02:44,362:INFO:Cross validation set to False
2025-07-06 14:02:44,363:INFO:Fitting Model
2025-07-06 14:02:44,950:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-06 14:02:44,950:INFO:create_model() successfully completed......................................
2025-07-06 14:02:45,026:INFO:_master_model_container: 14
2025-07-06 14:02:45,026:INFO:_display_container: 6
2025-07-06 14:02:45,090:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-06 14:02:45,090:INFO:finalize_model() successfully completed......................................
2025-07-06 14:02:45,225:INFO:Initializing predict_model()
2025-07-06 14:02:45,225:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x137561100>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x13815c430>)
2025-07-06 14:02:45,225:INFO:Checking exceptions
2025-07-06 14:02:45,226:INFO:Preloading libraries
2025-07-06 14:02:45,228:INFO:Set up data.
2025-07-06 14:02:45,239:INFO:Set up index.
2025-07-06 14:02:45,311:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 14:02:45,315:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-06 14:02:45,318:WARNING:/Users/Kylliann/Desktop/Projet la plateforme/bank-marketing/.venv/lib/python3.9/site-packages/sklearn/metrics/_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:31,258:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-08 10:46:31,259:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-08 10:46:31,261:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-08 10:46:31,261:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-07-08 10:46:43,230:INFO:PyCaret ClassificationExperiment
2025-07-08 10:46:43,230:INFO:Logging name: clf-default-name
2025-07-08 10:46:43,230:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-07-08 10:46:43,230:INFO:version 3.3.2
2025-07-08 10:46:43,230:INFO:Initializing setup()
2025-07-08 10:46:43,230:INFO:self.USI: 05fa
2025-07-08 10:46:43,230:INFO:self._variable_keys: {'X_train', 'n_jobs_param', 'exp_id', 'y_train', 'pipeline', 'is_multiclass', 'log_plots_param', 'exp_name_log', 'data', 'fold_groups_param', 'memory', 'fold_generator', 'USI', 'fold_shuffle_param', 'seed', 'html_param', '_available_plots', 'gpu_n_jobs_param', 'y', 'fix_imbalance', 'X', 'target_param', 'idx', '_ml_usecase', 'X_test', 'y_test', 'gpu_param', 'logging_param'}
2025-07-08 10:46:43,230:INFO:Checking environment
2025-07-08 10:46:43,231:INFO:python_version: 3.10.8
2025-07-08 10:46:43,231:INFO:python_build: ('tags/v3.10.8:aaaf517', 'Oct 11 2022 16:50:30')
2025-07-08 10:46:43,231:INFO:machine: AMD64
2025-07-08 10:46:43,231:INFO:platform: Windows-10-10.0.22631-SP0
2025-07-08 10:46:43,238:INFO:Memory: svmem(total=16857817088, available=5566226432, percent=67.0, used=11291590656, free=5566226432)
2025-07-08 10:46:43,238:INFO:Physical Core: 8
2025-07-08 10:46:43,238:INFO:Logical Core: 12
2025-07-08 10:46:43,239:INFO:Checking libraries
2025-07-08 10:46:43,239:INFO:System:
2025-07-08 10:46:43,239:INFO:    python: 3.10.8 (tags/v3.10.8:aaaf517, Oct 11 2022, 16:50:30) [MSC v.1933 64 bit (AMD64)]
2025-07-08 10:46:43,239:INFO:executable: c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\Scripts\python.exe
2025-07-08 10:46:43,239:INFO:   machine: Windows-10-10.0.22631-SP0
2025-07-08 10:46:43,239:INFO:PyCaret required dependencies:
2025-07-08 10:46:43,301:INFO:                 pip: 22.2.2
2025-07-08 10:46:43,302:INFO:          setuptools: 63.2.0
2025-07-08 10:46:43,302:INFO:             pycaret: 3.3.2
2025-07-08 10:46:43,302:INFO:             IPython: 8.37.0
2025-07-08 10:46:43,302:INFO:          ipywidgets: 8.1.7
2025-07-08 10:46:43,302:INFO:                tqdm: 4.67.1
2025-07-08 10:46:43,302:INFO:               numpy: 1.26.4
2025-07-08 10:46:43,302:INFO:              pandas: 2.1.4
2025-07-08 10:46:43,302:INFO:              jinja2: 3.1.6
2025-07-08 10:46:43,302:INFO:               scipy: 1.11.4
2025-07-08 10:46:43,302:INFO:              joblib: 1.3.2
2025-07-08 10:46:43,302:INFO:             sklearn: 1.4.2
2025-07-08 10:46:43,302:INFO:                pyod: 2.0.5
2025-07-08 10:46:43,302:INFO:            imblearn: 0.13.0
2025-07-08 10:46:43,302:INFO:   category_encoders: 2.7.0
2025-07-08 10:46:43,302:INFO:            lightgbm: 4.6.0
2025-07-08 10:46:43,302:INFO:               numba: 0.61.2
2025-07-08 10:46:43,302:INFO:            requests: 2.32.4
2025-07-08 10:46:43,302:INFO:          matplotlib: 3.7.5
2025-07-08 10:46:43,302:INFO:          scikitplot: 0.3.7
2025-07-08 10:46:43,302:INFO:         yellowbrick: 1.5
2025-07-08 10:46:43,302:INFO:              plotly: 5.24.1
2025-07-08 10:46:43,302:INFO:    plotly-resampler: Not installed
2025-07-08 10:46:43,302:INFO:             kaleido: 1.0.0
2025-07-08 10:46:43,302:INFO:           schemdraw: 0.15
2025-07-08 10:46:43,302:INFO:         statsmodels: 0.14.5
2025-07-08 10:46:43,302:INFO:              sktime: 0.26.0
2025-07-08 10:46:43,302:INFO:               tbats: 1.1.3
2025-07-08 10:46:43,302:INFO:            pmdarima: 2.0.4
2025-07-08 10:46:43,302:INFO:              psutil: 7.0.0
2025-07-08 10:46:43,302:INFO:          markupsafe: 3.0.2
2025-07-08 10:46:43,302:INFO:             pickle5: Not installed
2025-07-08 10:46:43,302:INFO:         cloudpickle: 3.1.1
2025-07-08 10:46:43,302:INFO:         deprecation: 2.1.0
2025-07-08 10:46:43,302:INFO:              xxhash: 3.5.0
2025-07-08 10:46:43,302:INFO:           wurlitzer: Not installed
2025-07-08 10:46:43,302:INFO:PyCaret optional dependencies:
2025-07-08 10:46:43,310:INFO:                shap: Not installed
2025-07-08 10:46:43,310:INFO:           interpret: Not installed
2025-07-08 10:46:43,310:INFO:                umap: Not installed
2025-07-08 10:46:43,310:INFO:     ydata_profiling: Not installed
2025-07-08 10:46:43,310:INFO:  explainerdashboard: Not installed
2025-07-08 10:46:43,310:INFO:             autoviz: Not installed
2025-07-08 10:46:43,310:INFO:           fairlearn: Not installed
2025-07-08 10:46:43,310:INFO:          deepchecks: Not installed
2025-07-08 10:46:43,310:INFO:             xgboost: Not installed
2025-07-08 10:46:43,310:INFO:            catboost: Not installed
2025-07-08 10:46:43,310:INFO:              kmodes: Not installed
2025-07-08 10:46:43,310:INFO:             mlxtend: Not installed
2025-07-08 10:46:43,310:INFO:       statsforecast: Not installed
2025-07-08 10:46:43,310:INFO:        tune_sklearn: Not installed
2025-07-08 10:46:43,310:INFO:                 ray: Not installed
2025-07-08 10:46:43,310:INFO:            hyperopt: Not installed
2025-07-08 10:46:43,310:INFO:              optuna: Not installed
2025-07-08 10:46:43,310:INFO:               skopt: Not installed
2025-07-08 10:46:43,311:INFO:              mlflow: Not installed
2025-07-08 10:46:43,311:INFO:              gradio: Not installed
2025-07-08 10:46:43,311:INFO:             fastapi: Not installed
2025-07-08 10:46:43,311:INFO:             uvicorn: Not installed
2025-07-08 10:46:43,311:INFO:              m2cgen: Not installed
2025-07-08 10:46:43,311:INFO:           evidently: Not installed
2025-07-08 10:46:43,311:INFO:               fugue: Not installed
2025-07-08 10:46:43,311:INFO:           streamlit: Not installed
2025-07-08 10:46:43,311:INFO:             prophet: Not installed
2025-07-08 10:46:43,311:INFO:None
2025-07-08 10:46:43,311:INFO:Set up data.
2025-07-08 10:46:43,320:INFO:Set up folding strategy.
2025-07-08 10:46:43,321:INFO:Set up train/test split.
2025-07-08 10:46:43,347:INFO:Set up index.
2025-07-08 10:46:43,347:INFO:Assigning column types.
2025-07-08 10:46:43,350:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-07-08 10:46:43,375:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-08 10:46:43,378:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-08 10:46:43,404:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:43,404:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:43,429:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-07-08 10:46:43,430:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-08 10:46:43,449:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:43,449:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:43,449:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-07-08 10:46:43,478:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-08 10:46:43,493:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:43,494:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:43,519:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-07-08 10:46:43,537:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:43,537:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:43,537:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-07-08 10:46:43,579:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:43,579:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:43,619:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:43,619:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:43,621:INFO:Preparing preprocessing pipeline...
2025-07-08 10:46:43,625:INFO:Set up label encoding.
2025-07-08 10:46:43,625:INFO:Set up simple imputation.
2025-07-08 10:46:43,627:INFO:Set up encoding of ordinal features.
2025-07-08 10:46:43,630:INFO:Set up encoding of categorical features.
2025-07-08 10:46:43,716:INFO:Finished creating preprocessing pipeline.
2025-07-08 10:46:43,738:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\axela\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indica...
                                                               return_df=True,
                                                               verbose=0))),
                ('onehot_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['job', 'marital', 'education',
                                             'month', 'poutcome'],
                                    transformer=OneHotEncoder(cols=['job',
                                                                    'marital',
                                                                    'education',
                                                                    'month',
                                                                    'poutcome'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0)))],
         verbose=False)
2025-07-08 10:46:43,739:INFO:Creating final display dataframe.
2025-07-08 10:46:44,008:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target                 y
2                   Target type            Binary
3                Target mapping     no: 0, yes: 1
4           Original data shape         (764, 17)
5        Transformed data shape         (764, 44)
6   Transformed train set shape         (534, 44)
7    Transformed test set shape         (230, 44)
8              Numeric features                 7
9          Categorical features                 9
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              05fa
2025-07-08 10:46:44,050:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:44,051:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:44,094:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:44,094:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-07-08 10:46:44,096:INFO:setup() successfully completed in 0.87s...............
2025-07-08 10:46:48,439:INFO:Initializing compare_models()
2025-07-08 10:46:48,439:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-07-08 10:46:48,439:INFO:Checking exceptions
2025-07-08 10:46:48,443:INFO:Preparing display monitor
2025-07-08 10:46:48,471:INFO:Initializing Logistic Regression
2025-07-08 10:46:48,471:INFO:Total runtime is 0.0 minutes
2025-07-08 10:46:48,474:INFO:SubProcess create_model() called ==================================
2025-07-08 10:46:48,474:INFO:Initializing create_model()
2025-07-08 10:46:48,474:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:46:48,474:INFO:Checking exceptions
2025-07-08 10:46:48,474:INFO:Importing libraries
2025-07-08 10:46:48,474:INFO:Copying training dataset
2025-07-08 10:46:48,479:INFO:Defining folds
2025-07-08 10:46:48,479:INFO:Declaring metric variables
2025-07-08 10:46:48,482:INFO:Importing untrained model
2025-07-08 10:46:48,486:INFO:Logistic Regression Imported successfully
2025-07-08 10:46:48,492:INFO:Starting cross validation
2025-07-08 10:46:48,495:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:46:54,123:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-08 10:46:54,129:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-08 10:46:54,136:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-08 10:46:54,162:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-08 10:46:54,183:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-08 10:46:54,227:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-08 10:46:54,327:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-08 10:46:54,349:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,350:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,351:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,351:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,351:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,360:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,360:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,362:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,363:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,363:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,368:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,372:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,372:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,374:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,394:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-08 10:46:54,410:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,421:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,435:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,524:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,531:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-08 10:46:54,533:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,545:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,559:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-07-08 10:46:54,569:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,577:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,584:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,671:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,681:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,688:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,692:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,698:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,703:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:54,722:INFO:Calculating mean and std
2025-07-08 10:46:54,725:INFO:Creating metrics dataframe
2025-07-08 10:46:54,731:INFO:Uploading results into container
2025-07-08 10:46:54,733:INFO:Uploading model into container now
2025-07-08 10:46:54,735:INFO:_master_model_container: 1
2025-07-08 10:46:54,735:INFO:_display_container: 2
2025-07-08 10:46:54,737:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-07-08 10:46:54,738:INFO:create_model() successfully completed......................................
2025-07-08 10:46:54,853:INFO:SubProcess create_model() end ==================================
2025-07-08 10:46:54,853:INFO:Creating metrics dataframe
2025-07-08 10:46:54,865:INFO:Initializing K Neighbors Classifier
2025-07-08 10:46:54,866:INFO:Total runtime is 0.10657132069269816 minutes
2025-07-08 10:46:54,873:INFO:SubProcess create_model() called ==================================
2025-07-08 10:46:54,874:INFO:Initializing create_model()
2025-07-08 10:46:54,874:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:46:54,874:INFO:Checking exceptions
2025-07-08 10:46:54,874:INFO:Importing libraries
2025-07-08 10:46:54,874:INFO:Copying training dataset
2025-07-08 10:46:54,885:INFO:Defining folds
2025-07-08 10:46:54,886:INFO:Declaring metric variables
2025-07-08 10:46:54,897:INFO:Importing untrained model
2025-07-08 10:46:54,908:INFO:K Neighbors Classifier Imported successfully
2025-07-08 10:46:54,937:INFO:Starting cross validation
2025-07-08 10:46:54,945:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:46:55,818:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,826:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,829:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,832:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,835:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,838:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,840:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,842:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,843:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,849:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,851:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,852:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,853:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,853:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,860:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,864:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,865:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,868:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,870:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,872:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,873:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,879:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,880:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:55,886:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,269:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,269:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,272:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,273:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,276:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,277:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,294:INFO:Calculating mean and std
2025-07-08 10:46:59,296:INFO:Creating metrics dataframe
2025-07-08 10:46:59,298:INFO:Uploading results into container
2025-07-08 10:46:59,299:INFO:Uploading model into container now
2025-07-08 10:46:59,299:INFO:_master_model_container: 2
2025-07-08 10:46:59,299:INFO:_display_container: 2
2025-07-08 10:46:59,300:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-07-08 10:46:59,300:INFO:create_model() successfully completed......................................
2025-07-08 10:46:59,375:INFO:SubProcess create_model() end ==================================
2025-07-08 10:46:59,375:INFO:Creating metrics dataframe
2025-07-08 10:46:59,386:INFO:Initializing Naive Bayes
2025-07-08 10:46:59,386:INFO:Total runtime is 0.18190880219141642 minutes
2025-07-08 10:46:59,390:INFO:SubProcess create_model() called ==================================
2025-07-08 10:46:59,391:INFO:Initializing create_model()
2025-07-08 10:46:59,391:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:46:59,391:INFO:Checking exceptions
2025-07-08 10:46:59,391:INFO:Importing libraries
2025-07-08 10:46:59,391:INFO:Copying training dataset
2025-07-08 10:46:59,399:INFO:Defining folds
2025-07-08 10:46:59,399:INFO:Declaring metric variables
2025-07-08 10:46:59,406:INFO:Importing untrained model
2025-07-08 10:46:59,413:INFO:Naive Bayes Imported successfully
2025-07-08 10:46:59,424:INFO:Starting cross validation
2025-07-08 10:46:59,428:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:46:59,853:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,861:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,868:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,868:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,878:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,884:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,884:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,894:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,894:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,894:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,894:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,894:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,910:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,910:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,910:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,910:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,910:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,910:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,910:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,910:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,910:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,910:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,926:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,927:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,928:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,932:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,933:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,937:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,942:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:46:59,958:INFO:Calculating mean and std
2025-07-08 10:46:59,961:INFO:Creating metrics dataframe
2025-07-08 10:46:59,965:INFO:Uploading results into container
2025-07-08 10:46:59,966:INFO:Uploading model into container now
2025-07-08 10:46:59,966:INFO:_master_model_container: 3
2025-07-08 10:46:59,967:INFO:_display_container: 2
2025-07-08 10:46:59,967:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-07-08 10:46:59,967:INFO:create_model() successfully completed......................................
2025-07-08 10:47:00,078:INFO:SubProcess create_model() end ==================================
2025-07-08 10:47:00,078:INFO:Creating metrics dataframe
2025-07-08 10:47:00,098:INFO:Initializing Decision Tree Classifier
2025-07-08 10:47:00,098:INFO:Total runtime is 0.19378337065378826 minutes
2025-07-08 10:47:00,106:INFO:SubProcess create_model() called ==================================
2025-07-08 10:47:00,106:INFO:Initializing create_model()
2025-07-08 10:47:00,107:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:47:00,107:INFO:Checking exceptions
2025-07-08 10:47:00,107:INFO:Importing libraries
2025-07-08 10:47:00,108:INFO:Copying training dataset
2025-07-08 10:47:00,114:INFO:Defining folds
2025-07-08 10:47:00,126:INFO:Declaring metric variables
2025-07-08 10:47:00,136:INFO:Importing untrained model
2025-07-08 10:47:00,144:INFO:Decision Tree Classifier Imported successfully
2025-07-08 10:47:00,158:INFO:Starting cross validation
2025-07-08 10:47:00,163:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:47:00,639:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,641:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,645:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,647:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,647:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,650:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,652:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,654:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,656:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,660:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,663:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,664:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,666:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,668:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,675:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,685:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,686:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,693:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,693:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,694:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,701:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,701:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,702:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,708:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,708:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,710:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,714:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,721:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:00,735:INFO:Calculating mean and std
2025-07-08 10:47:00,738:INFO:Creating metrics dataframe
2025-07-08 10:47:00,744:INFO:Uploading results into container
2025-07-08 10:47:00,746:INFO:Uploading model into container now
2025-07-08 10:47:00,747:INFO:_master_model_container: 4
2025-07-08 10:47:00,747:INFO:_display_container: 2
2025-07-08 10:47:00,748:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-07-08 10:47:00,749:INFO:create_model() successfully completed......................................
2025-07-08 10:47:00,854:INFO:SubProcess create_model() end ==================================
2025-07-08 10:47:00,854:INFO:Creating metrics dataframe
2025-07-08 10:47:00,869:INFO:Initializing SVM - Linear Kernel
2025-07-08 10:47:00,869:INFO:Total runtime is 0.20662278334299725 minutes
2025-07-08 10:47:00,876:INFO:SubProcess create_model() called ==================================
2025-07-08 10:47:00,877:INFO:Initializing create_model()
2025-07-08 10:47:00,877:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:47:00,877:INFO:Checking exceptions
2025-07-08 10:47:00,877:INFO:Importing libraries
2025-07-08 10:47:00,878:INFO:Copying training dataset
2025-07-08 10:47:00,887:INFO:Defining folds
2025-07-08 10:47:00,887:INFO:Declaring metric variables
2025-07-08 10:47:00,895:INFO:Importing untrained model
2025-07-08 10:47:00,907:INFO:SVM - Linear Kernel Imported successfully
2025-07-08 10:47:00,922:INFO:Starting cross validation
2025-07-08 10:47:00,928:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:47:01,449:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,453:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,461:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,461:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,461:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,476:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,477:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,477:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,477:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,477:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,477:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,477:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,492:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,497:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,497:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,498:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,499:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,500:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,505:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,505:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,507:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,509:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,510:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,514:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,520:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,525:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,539:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,544:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,548:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:01,570:INFO:Calculating mean and std
2025-07-08 10:47:01,572:INFO:Creating metrics dataframe
2025-07-08 10:47:01,576:INFO:Uploading results into container
2025-07-08 10:47:01,577:INFO:Uploading model into container now
2025-07-08 10:47:01,578:INFO:_master_model_container: 5
2025-07-08 10:47:01,579:INFO:_display_container: 2
2025-07-08 10:47:01,580:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-07-08 10:47:01,580:INFO:create_model() successfully completed......................................
2025-07-08 10:47:01,677:INFO:SubProcess create_model() end ==================================
2025-07-08 10:47:01,677:INFO:Creating metrics dataframe
2025-07-08 10:47:01,693:INFO:Initializing Ridge Classifier
2025-07-08 10:47:01,693:INFO:Total runtime is 0.22035280863444012 minutes
2025-07-08 10:47:01,700:INFO:SubProcess create_model() called ==================================
2025-07-08 10:47:01,701:INFO:Initializing create_model()
2025-07-08 10:47:01,701:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:47:01,702:INFO:Checking exceptions
2025-07-08 10:47:01,702:INFO:Importing libraries
2025-07-08 10:47:01,702:INFO:Copying training dataset
2025-07-08 10:47:01,709:INFO:Defining folds
2025-07-08 10:47:01,710:INFO:Declaring metric variables
2025-07-08 10:47:01,718:INFO:Importing untrained model
2025-07-08 10:47:01,726:INFO:Ridge Classifier Imported successfully
2025-07-08 10:47:01,748:INFO:Starting cross validation
2025-07-08 10:47:01,752:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:47:02,210:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,217:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,218:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,222:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,226:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,232:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,234:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,234:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,234:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,241:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,242:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,243:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,245:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,246:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,246:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,248:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,252:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,254:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,268:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,271:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,272:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,276:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,277:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,278:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,281:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,285:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,286:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,292:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,298:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,302:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:02,311:INFO:Calculating mean and std
2025-07-08 10:47:02,313:INFO:Creating metrics dataframe
2025-07-08 10:47:02,317:INFO:Uploading results into container
2025-07-08 10:47:02,317:INFO:Uploading model into container now
2025-07-08 10:47:02,318:INFO:_master_model_container: 6
2025-07-08 10:47:02,318:INFO:_display_container: 2
2025-07-08 10:47:02,319:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-07-08 10:47:02,319:INFO:create_model() successfully completed......................................
2025-07-08 10:47:02,405:INFO:SubProcess create_model() end ==================================
2025-07-08 10:47:02,405:INFO:Creating metrics dataframe
2025-07-08 10:47:02,419:INFO:Initializing Random Forest Classifier
2025-07-08 10:47:02,420:INFO:Total runtime is 0.23248205184936524 minutes
2025-07-08 10:47:02,426:INFO:SubProcess create_model() called ==================================
2025-07-08 10:47:02,427:INFO:Initializing create_model()
2025-07-08 10:47:02,427:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:47:02,427:INFO:Checking exceptions
2025-07-08 10:47:02,428:INFO:Importing libraries
2025-07-08 10:47:02,428:INFO:Copying training dataset
2025-07-08 10:47:02,440:INFO:Defining folds
2025-07-08 10:47:02,440:INFO:Declaring metric variables
2025-07-08 10:47:02,447:INFO:Importing untrained model
2025-07-08 10:47:02,455:INFO:Random Forest Classifier Imported successfully
2025-07-08 10:47:02,468:INFO:Starting cross validation
2025-07-08 10:47:02,474:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:47:03,660:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,660:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,672:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,677:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,687:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,695:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,697:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,698:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,699:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,700:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,702:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,702:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,710:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,711:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,712:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,714:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,717:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,719:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,719:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,727:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,736:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,755:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,756:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,760:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,760:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,760:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-08 10:47:03,760:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,777:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,777:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,794:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,811:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:03,827:INFO:Calculating mean and std
2025-07-08 10:47:03,827:INFO:Creating metrics dataframe
2025-07-08 10:47:03,837:INFO:Uploading results into container
2025-07-08 10:47:03,839:INFO:Uploading model into container now
2025-07-08 10:47:03,840:INFO:_master_model_container: 7
2025-07-08 10:47:03,840:INFO:_display_container: 2
2025-07-08 10:47:03,841:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-07-08 10:47:03,842:INFO:create_model() successfully completed......................................
2025-07-08 10:47:03,960:INFO:SubProcess create_model() end ==================================
2025-07-08 10:47:03,960:INFO:Creating metrics dataframe
2025-07-08 10:47:03,981:INFO:Initializing Quadratic Discriminant Analysis
2025-07-08 10:47:03,981:INFO:Total runtime is 0.2585012435913086 minutes
2025-07-08 10:47:03,992:INFO:SubProcess create_model() called ==================================
2025-07-08 10:47:03,993:INFO:Initializing create_model()
2025-07-08 10:47:03,993:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:47:03,993:INFO:Checking exceptions
2025-07-08 10:47:03,993:INFO:Importing libraries
2025-07-08 10:47:03,994:INFO:Copying training dataset
2025-07-08 10:47:04,008:INFO:Defining folds
2025-07-08 10:47:04,008:INFO:Declaring metric variables
2025-07-08 10:47:04,016:INFO:Importing untrained model
2025-07-08 10:47:04,025:INFO:Quadratic Discriminant Analysis Imported successfully
2025-07-08 10:47:04,041:INFO:Starting cross validation
2025-07-08 10:47:04,049:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:47:04,436:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-08 10:47:04,436:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-08 10:47:04,437:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-08 10:47:04,437:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-08 10:47:04,437:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-08 10:47:04,438:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-08 10:47:04,439:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-08 10:47:04,452:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-07-08 10:47:04,586:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,588:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,589:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,593:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,594:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,594:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,594:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,594:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,602:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,603:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,603:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,604:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,605:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,605:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,606:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,612:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,612:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,614:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,618:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,619:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,619:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,620:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,624:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,626:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,629:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,631:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,631:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,634:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,640:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:04,655:INFO:Calculating mean and std
2025-07-08 10:47:04,658:INFO:Creating metrics dataframe
2025-07-08 10:47:04,662:INFO:Uploading results into container
2025-07-08 10:47:04,663:INFO:Uploading model into container now
2025-07-08 10:47:04,663:INFO:_master_model_container: 8
2025-07-08 10:47:04,664:INFO:_display_container: 2
2025-07-08 10:47:04,664:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-07-08 10:47:04,664:INFO:create_model() successfully completed......................................
2025-07-08 10:47:04,768:INFO:SubProcess create_model() end ==================================
2025-07-08 10:47:04,769:INFO:Creating metrics dataframe
2025-07-08 10:47:04,786:INFO:Initializing Ada Boost Classifier
2025-07-08 10:47:04,786:INFO:Total runtime is 0.2719077189763387 minutes
2025-07-08 10:47:04,793:INFO:SubProcess create_model() called ==================================
2025-07-08 10:47:04,794:INFO:Initializing create_model()
2025-07-08 10:47:04,795:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:47:04,795:INFO:Checking exceptions
2025-07-08 10:47:04,795:INFO:Importing libraries
2025-07-08 10:47:04,795:INFO:Copying training dataset
2025-07-08 10:47:04,803:INFO:Defining folds
2025-07-08 10:47:04,804:INFO:Declaring metric variables
2025-07-08 10:47:04,811:INFO:Importing untrained model
2025-07-08 10:47:04,819:INFO:Ada Boost Classifier Imported successfully
2025-07-08 10:47:04,835:INFO:Starting cross validation
2025-07-08 10:47:04,842:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:47:05,206:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-08 10:47:05,207:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-08 10:47:05,207:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-08 10:47:05,207:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-08 10:47:05,207:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-08 10:47:05,207:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-08 10:47:05,207:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-08 10:47:05,227:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-07-08 10:47:05,627:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,642:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,650:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,677:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,677:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,691:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,691:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,692:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,695:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,695:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,696:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,698:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,699:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,700:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,700:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,701:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,704:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,704:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,704:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,705:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,710:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,712:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,712:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,714:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,719:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,720:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,726:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,726:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,733:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,736:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:05,754:INFO:Calculating mean and std
2025-07-08 10:47:05,756:INFO:Creating metrics dataframe
2025-07-08 10:47:05,760:INFO:Uploading results into container
2025-07-08 10:47:05,761:INFO:Uploading model into container now
2025-07-08 10:47:05,762:INFO:_master_model_container: 9
2025-07-08 10:47:05,763:INFO:_display_container: 2
2025-07-08 10:47:05,764:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-07-08 10:47:05,764:INFO:create_model() successfully completed......................................
2025-07-08 10:47:05,862:INFO:SubProcess create_model() end ==================================
2025-07-08 10:47:05,862:INFO:Creating metrics dataframe
2025-07-08 10:47:05,877:INFO:Initializing Gradient Boosting Classifier
2025-07-08 10:47:05,877:INFO:Total runtime is 0.29008882443110146 minutes
2025-07-08 10:47:05,883:INFO:SubProcess create_model() called ==================================
2025-07-08 10:47:05,884:INFO:Initializing create_model()
2025-07-08 10:47:05,884:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:47:05,884:INFO:Checking exceptions
2025-07-08 10:47:05,885:INFO:Importing libraries
2025-07-08 10:47:05,885:INFO:Copying training dataset
2025-07-08 10:47:05,894:INFO:Defining folds
2025-07-08 10:47:05,894:INFO:Declaring metric variables
2025-07-08 10:47:05,900:INFO:Importing untrained model
2025-07-08 10:47:05,908:INFO:Gradient Boosting Classifier Imported successfully
2025-07-08 10:47:05,923:INFO:Starting cross validation
2025-07-08 10:47:05,929:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:47:06,910:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,910:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,926:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,928:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,930:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,933:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,938:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,941:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,944:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,947:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,951:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,951:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,953:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,954:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,959:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,959:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,960:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,970:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,986:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,992:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,996:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,997:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:06,998:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,000:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,002:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,005:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,006:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,015:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,020:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,024:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,035:INFO:Calculating mean and std
2025-07-08 10:47:07,037:INFO:Creating metrics dataframe
2025-07-08 10:47:07,041:INFO:Uploading results into container
2025-07-08 10:47:07,041:INFO:Uploading model into container now
2025-07-08 10:47:07,042:INFO:_master_model_container: 10
2025-07-08 10:47:07,042:INFO:_display_container: 2
2025-07-08 10:47:07,044:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-08 10:47:07,044:INFO:create_model() successfully completed......................................
2025-07-08 10:47:07,143:INFO:SubProcess create_model() end ==================================
2025-07-08 10:47:07,143:INFO:Creating metrics dataframe
2025-07-08 10:47:07,159:INFO:Initializing Linear Discriminant Analysis
2025-07-08 10:47:07,160:INFO:Total runtime is 0.31148308515548706 minutes
2025-07-08 10:47:07,167:INFO:SubProcess create_model() called ==================================
2025-07-08 10:47:07,168:INFO:Initializing create_model()
2025-07-08 10:47:07,168:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:47:07,169:INFO:Checking exceptions
2025-07-08 10:47:07,169:INFO:Importing libraries
2025-07-08 10:47:07,169:INFO:Copying training dataset
2025-07-08 10:47:07,179:INFO:Defining folds
2025-07-08 10:47:07,179:INFO:Declaring metric variables
2025-07-08 10:47:07,186:INFO:Importing untrained model
2025-07-08 10:47:07,200:INFO:Linear Discriminant Analysis Imported successfully
2025-07-08 10:47:07,225:INFO:Starting cross validation
2025-07-08 10:47:07,231:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:47:07,724:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,728:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,731:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,734:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,739:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,742:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,743:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,748:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,751:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,752:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,753:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,760:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,760:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,762:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,763:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,764:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,766:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,766:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,766:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,766:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,766:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,773:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,774:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,776:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,780:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,780:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,782:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,789:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,795:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:07,811:INFO:Calculating mean and std
2025-07-08 10:47:07,814:INFO:Creating metrics dataframe
2025-07-08 10:47:07,816:INFO:Uploading results into container
2025-07-08 10:47:07,818:INFO:Uploading model into container now
2025-07-08 10:47:07,819:INFO:_master_model_container: 11
2025-07-08 10:47:07,819:INFO:_display_container: 2
2025-07-08 10:47:07,820:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-07-08 10:47:07,820:INFO:create_model() successfully completed......................................
2025-07-08 10:47:07,917:INFO:SubProcess create_model() end ==================================
2025-07-08 10:47:07,918:INFO:Creating metrics dataframe
2025-07-08 10:47:07,935:INFO:Initializing Extra Trees Classifier
2025-07-08 10:47:07,935:INFO:Total runtime is 0.3243987162907918 minutes
2025-07-08 10:47:07,944:INFO:SubProcess create_model() called ==================================
2025-07-08 10:47:07,944:INFO:Initializing create_model()
2025-07-08 10:47:07,945:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:47:07,945:INFO:Checking exceptions
2025-07-08 10:47:07,945:INFO:Importing libraries
2025-07-08 10:47:07,946:INFO:Copying training dataset
2025-07-08 10:47:07,957:INFO:Defining folds
2025-07-08 10:47:07,957:INFO:Declaring metric variables
2025-07-08 10:47:07,966:INFO:Importing untrained model
2025-07-08 10:47:07,977:INFO:Extra Trees Classifier Imported successfully
2025-07-08 10:47:07,992:INFO:Starting cross validation
2025-07-08 10:47:07,997:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:47:09,003:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,015:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,017:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,019:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,024:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,028:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,028:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,035:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,035:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,049:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,060:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,070:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,086:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,095:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,095:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,099:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,099:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,111:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,120:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,131:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,212:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,213:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,219:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,221:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,221:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,229:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,230:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:09,255:INFO:Calculating mean and std
2025-07-08 10:47:09,259:INFO:Creating metrics dataframe
2025-07-08 10:47:09,264:INFO:Uploading results into container
2025-07-08 10:47:09,266:INFO:Uploading model into container now
2025-07-08 10:47:09,267:INFO:_master_model_container: 12
2025-07-08 10:47:09,268:INFO:_display_container: 2
2025-07-08 10:47:09,269:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-07-08 10:47:09,269:INFO:create_model() successfully completed......................................
2025-07-08 10:47:09,368:INFO:SubProcess create_model() end ==================================
2025-07-08 10:47:09,369:INFO:Creating metrics dataframe
2025-07-08 10:47:09,385:INFO:Initializing Light Gradient Boosting Machine
2025-07-08 10:47:09,385:INFO:Total runtime is 0.34856582085291543 minutes
2025-07-08 10:47:09,391:INFO:SubProcess create_model() called ==================================
2025-07-08 10:47:09,392:INFO:Initializing create_model()
2025-07-08 10:47:09,392:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:47:09,392:INFO:Checking exceptions
2025-07-08 10:47:09,392:INFO:Importing libraries
2025-07-08 10:47:09,392:INFO:Copying training dataset
2025-07-08 10:47:09,404:INFO:Defining folds
2025-07-08 10:47:09,404:INFO:Declaring metric variables
2025-07-08 10:47:09,410:INFO:Importing untrained model
2025-07-08 10:47:09,418:INFO:Light Gradient Boosting Machine Imported successfully
2025-07-08 10:47:09,437:INFO:Starting cross validation
2025-07-08 10:47:09,442:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:47:11,026:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,026:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,026:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,169:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,174:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,180:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,254:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,254:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,260:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,260:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,260:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,260:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,293:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,293:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,310:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,310:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,310:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,326:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,326:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,326:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,345:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,353:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,358:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,360:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,376:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,392:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,397:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,410:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,410:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,410:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:11,441:INFO:Calculating mean and std
2025-07-08 10:47:11,445:INFO:Creating metrics dataframe
2025-07-08 10:47:11,449:INFO:Uploading results into container
2025-07-08 10:47:11,450:INFO:Uploading model into container now
2025-07-08 10:47:11,450:INFO:_master_model_container: 13
2025-07-08 10:47:11,450:INFO:_display_container: 2
2025-07-08 10:47:11,450:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-07-08 10:47:11,450:INFO:create_model() successfully completed......................................
2025-07-08 10:47:11,533:INFO:SubProcess create_model() end ==================================
2025-07-08 10:47:11,533:INFO:Creating metrics dataframe
2025-07-08 10:47:11,560:INFO:Initializing Dummy Classifier
2025-07-08 10:47:11,560:INFO:Total runtime is 0.38481165568033854 minutes
2025-07-08 10:47:11,568:INFO:SubProcess create_model() called ==================================
2025-07-08 10:47:11,568:INFO:Initializing create_model()
2025-07-08 10:47:11,569:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000029A15F73B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:47:11,569:INFO:Checking exceptions
2025-07-08 10:47:11,569:INFO:Importing libraries
2025-07-08 10:47:11,569:INFO:Copying training dataset
2025-07-08 10:47:11,583:INFO:Defining folds
2025-07-08 10:47:11,583:INFO:Declaring metric variables
2025-07-08 10:47:11,593:INFO:Importing untrained model
2025-07-08 10:47:11,601:INFO:Dummy Classifier Imported successfully
2025-07-08 10:47:11,617:INFO:Starting cross validation
2025-07-08 10:47:11,622:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-07-08 10:47:12,093:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,093:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,093:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,093:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,093:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,093:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-08 10:47:12,110:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,110:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-08 10:47:12,110:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,110:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,110:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,110:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,110:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,110:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-08 10:47:12,110:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-08 10:47:12,110:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,110:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,110:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,127:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-08 10:47:12,127:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,127:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,127:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,127:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,127:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,143:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-08 10:47:12,145:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-08 10:47:12,148:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,150:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,166:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,167:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,171:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,172:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-08 10:47:12,174:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,175:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,178:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2025-07-08 10:47:12,181:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,183:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,185:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-07-08 10:47:12,188:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:47:12,202:INFO:Calculating mean and std
2025-07-08 10:47:12,205:INFO:Creating metrics dataframe
2025-07-08 10:47:12,209:INFO:Uploading results into container
2025-07-08 10:47:12,210:INFO:Uploading model into container now
2025-07-08 10:47:12,210:INFO:_master_model_container: 14
2025-07-08 10:47:12,211:INFO:_display_container: 2
2025-07-08 10:47:12,211:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-07-08 10:47:12,212:INFO:create_model() successfully completed......................................
2025-07-08 10:47:12,305:INFO:SubProcess create_model() end ==================================
2025-07-08 10:47:12,306:INFO:Creating metrics dataframe
2025-07-08 10:47:12,328:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-07-08 10:47:12,345:INFO:Initializing create_model()
2025-07-08 10:47:12,346:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:47:12,346:INFO:Checking exceptions
2025-07-08 10:47:12,349:INFO:Importing libraries
2025-07-08 10:47:12,349:INFO:Copying training dataset
2025-07-08 10:47:12,358:INFO:Defining folds
2025-07-08 10:47:12,358:INFO:Declaring metric variables
2025-07-08 10:47:12,358:INFO:Importing untrained model
2025-07-08 10:47:12,359:INFO:Declaring custom model
2025-07-08 10:47:12,360:INFO:Gradient Boosting Classifier Imported successfully
2025-07-08 10:47:12,364:INFO:Cross validation set to False
2025-07-08 10:47:12,364:INFO:Fitting Model
2025-07-08 10:47:12,854:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-08 10:47:12,855:INFO:create_model() successfully completed......................................
2025-07-08 10:47:12,968:INFO:_master_model_container: 14
2025-07-08 10:47:12,968:INFO:_display_container: 2
2025-07-08 10:47:12,970:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-08 10:47:12,970:INFO:compare_models() successfully completed......................................
2025-07-08 10:48:03,715:INFO:Initializing plot_model()
2025-07-08 10:48:03,715:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, system=True)
2025-07-08 10:48:03,715:INFO:Checking exceptions
2025-07-08 10:48:03,719:INFO:Preloading libraries
2025-07-08 10:48:03,735:INFO:Copying training dataset
2025-07-08 10:48:03,735:INFO:Plot type: confusion_matrix
2025-07-08 10:48:03,997:INFO:Fitting Model
2025-07-08 10:48:04,025:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but GradientBoostingClassifier was fitted with feature names
  warnings.warn(

2025-07-08 10:48:04,025:INFO:Scoring test/hold-out set
2025-07-08 10:48:04,175:INFO:Visual Rendered Successfully
2025-07-08 10:48:04,229:INFO:plot_model() successfully completed......................................
2025-07-08 10:48:20,328:INFO:Initializing plot_model()
2025-07-08 10:48:20,328:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, system=True)
2025-07-08 10:48:20,328:INFO:Checking exceptions
2025-07-08 10:48:20,328:INFO:Preloading libraries
2025-07-08 10:48:20,328:INFO:Copying training dataset
2025-07-08 10:48:20,328:INFO:Plot type: auc
2025-07-08 10:48:20,592:INFO:Fitting Model
2025-07-08 10:48:20,592:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but GradientBoostingClassifier was fitted with feature names
  warnings.warn(

2025-07-08 10:48:20,592:INFO:Scoring test/hold-out set
2025-07-08 10:48:20,731:INFO:Visual Rendered Successfully
2025-07-08 10:48:20,791:INFO:plot_model() successfully completed......................................
2025-07-08 10:49:29,681:INFO:Initializing plot_model()
2025-07-08 10:49:29,682:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, system=True)
2025-07-08 10:49:29,682:INFO:Checking exceptions
2025-07-08 10:49:29,701:INFO:Preloading libraries
2025-07-08 10:49:29,723:INFO:Copying training dataset
2025-07-08 10:49:29,724:INFO:Plot type: feature
2025-07-08 10:49:29,724:WARNING:No coef_ found. Trying feature_importances_
2025-07-08 10:49:30,550:INFO:Visual Rendered Successfully
2025-07-08 10:49:30,655:INFO:plot_model() successfully completed......................................
2025-07-08 10:49:56,310:INFO:Initializing plot_model()
2025-07-08 10:49:56,310:INFO:plot_model(plot=learning, fold=None, verbose=True, display=None, display_format=None, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, system=True)
2025-07-08 10:49:56,310:INFO:Checking exceptions
2025-07-08 10:49:56,330:INFO:Preloading libraries
2025-07-08 10:49:56,342:INFO:Copying training dataset
2025-07-08 10:49:56,342:INFO:Plot type: learning
2025-07-08 10:49:57,066:INFO:Fitting Model
2025-07-08 10:49:59,356:INFO:Visual Rendered Successfully
2025-07-08 10:49:59,440:INFO:plot_model() successfully completed......................................
2025-07-08 10:50:10,648:INFO:Initializing finalize_model()
2025-07-08 10:50:10,655:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-07-08 10:50:10,655:INFO:Finalizing GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-07-08 10:50:10,658:INFO:Initializing create_model()
2025-07-08 10:50:10,659:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-07-08 10:50:10,659:INFO:Checking exceptions
2025-07-08 10:50:10,660:INFO:Importing libraries
2025-07-08 10:50:10,660:INFO:Copying training dataset
2025-07-08 10:50:10,660:INFO:Defining folds
2025-07-08 10:50:10,660:INFO:Declaring metric variables
2025-07-08 10:50:10,660:INFO:Importing untrained model
2025-07-08 10:50:10,660:INFO:Declaring custom model
2025-07-08 10:50:10,660:INFO:Gradient Boosting Classifier Imported successfully
2025-07-08 10:50:10,660:INFO:Cross validation set to False
2025-07-08 10:50:10,660:INFO:Fitting Model
2025-07-08 10:50:10,923:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-08 10:50:10,924:INFO:create_model() successfully completed......................................
2025-07-08 10:50:10,980:INFO:_master_model_container: 14
2025-07-08 10:50:10,980:INFO:_display_container: 2
2025-07-08 10:50:10,992:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-07-08 10:50:10,992:INFO:finalize_model() successfully completed......................................
2025-07-08 10:50:11,085:INFO:Initializing predict_model()
2025-07-08 10:50:11,085:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000029A62FE39A0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['age', 'balance', 'day',
                                             'duration', 'campaign', 'pdays',
                                             'previous'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029A160F3E20>)
2025-07-08 10:50:11,085:INFO:Checking exceptions
2025-07-08 10:50:11,085:INFO:Preloading libraries
2025-07-08 10:50:11,088:INFO:Set up data.
2025-07-08 10:50:11,092:INFO:Set up index.
2025-07-08 10:50:11,133:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:50:11,135:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-07-08 10:50:11,137:WARNING:c:\Users\axela\Desktop\LaPlateforme\Projets Ecole\AI\Projet 16 - Bank Marketing\.venv\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

